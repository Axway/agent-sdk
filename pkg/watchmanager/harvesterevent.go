package watchmanager

import (
	"strings"

	"github.com/Axway/agent-sdk/pkg/watchmanager/proto"
)

type harvesterResourceReference struct {
	Id        string `json:"id,omitempty"`
	Kind      string `json:"kind,omitempty"`
	Name      string `json:"name,omitempty"`
	ScopeKind string `json:"scopeKind,omitempty"`
	ScopeName string `json:"scopeName,omitempty"`
	SelfLink  string `json:"selfLink,omitempty"`
	Type      string `json:"type,omitempty"`
}

// HarvesterResourceMetadata that all server resources have. Data is generated by the server.
type harvesterResourceMetadata struct {
	Id         string                        `json:"id,omitempty"`
	Scope      *proto.Metadata_ScopeKind     `json:"scope,omitempty"`
	SelfLink   string                        `json:"selfLink,omitempty"`
	References []*harvesterResourceReference `json:"references,omitempty"`
}

type harvesterResourceInstance struct {
	Group      string                     `json:"group,omitempty"`
	Kind       string                     `json:"kind,omitempty"`
	Name       string                     `json:"name,omitempty"`
	Metadata   *harvesterResourceMetadata `json:"metadata,omitempty"`
	Attributes map[string]string          `json:"attributes,omitempty"`
}

type resourceEntryExternalEvent struct {
	Id            string                     `json:"id,omitempty"`
	Time          string                     `json:"time,omitempty"`
	Version       string                     `json:"version,omitempty"`
	Product       string                     `json:"product,omitempty"`
	CorrelationId string                     `json:"correlationId,omitempty"`
	Organization  *proto.Organization        `json:"organization,omitempty"`
	Type          string                     `json:"type,omitempty"`
	Payload       *harvesterResourceInstance `json:"payload,omitempty"`
	Metadata      *proto.EventMeta           `json:"metadata,omitempty"`
}

func (r *resourceEntryExternalEvent) toProtoEvent() *proto.Event {
	return &proto.Event{
		Id:            r.Id,
		Time:          r.Time,
		Version:       r.Version,
		Product:       r.Product,
		CorrelationId: r.CorrelationId,
		Organization:  r.Organization,
		Type:          r.convertProtoType(),
		Payload:       r.convertPayload(),
		Metadata:      r.convertEventMetadata(),
	}
}

func (r *resourceEntryExternalEvent) convertEventMetadata() *proto.EventMeta {
	if r.Metadata != nil {
		return &proto.EventMeta{
			WatchTopicID:       r.Metadata.WatchTopicID,
			WatchTopicSelfLink: r.Metadata.WatchTopicSelfLink,
			SequenceID:         r.Metadata.SequenceID,
		}
	}
	return nil
}

func (r *resourceEntryExternalEvent) convertProtoType() proto.Event_Type {
	t := strings.ToUpper(strings.TrimPrefix(r.Type, "Resource"))
	eventType, ok := proto.Event_Type_value[t]
	if ok {
		return proto.Event_Type(eventType)
	}
	return proto.Event_CREATED
}

func (r *resourceEntryExternalEvent) convertPayload() *proto.ResourceInstance {
	if r.Payload != nil {
		return &proto.ResourceInstance{
			Group: r.Payload.Group,
			Kind:  r.Payload.Kind,
			Name:  r.Payload.Name,
			Metadata: &proto.Metadata{
				Id:         r.Payload.Metadata.Id,
				Scope:      r.Payload.Metadata.Scope,
				SelfLink:   r.Payload.Metadata.SelfLink,
				References: r.convertResourceReferences(),
			},
			Attributes: r.Payload.Attributes,
		}
	}
	return nil
}

func (r *resourceEntryExternalEvent) convertResourceReferences() []*proto.Reference {
	if r.Payload.Metadata.References != nil {
		references := make([]*proto.Reference, 0)
		for _, hRef := range r.Payload.Metadata.References {
			ref := &proto.Reference{
				Id:        hRef.Id,
				Kind:      hRef.Kind,
				Name:      hRef.Name,
				ScopeKind: hRef.ScopeKind,
				ScopeName: hRef.ScopeName,
				SelfLink:  hRef.SelfLink,
				Type:      r.convertReferenceType(hRef.Type),
			}
			references = append(references, ref)
		}
		return references
	}
	return nil
}

func (r *resourceEntryExternalEvent) convertReferenceType(strReferenceType string) proto.Reference_Type {
	referenceType, ok := proto.Reference_Type_value[strReferenceType]
	if ok {
		return proto.Reference_Type(referenceType)
	}
	return proto.Reference_HARD
}
