package migrate

import (
	"strings"
	"sync"
	"testing"

	cache2 "github.com/Axway/agent-sdk/pkg/agent/cache"
	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
	v1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
	mv1a "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/management/v1alpha1"
	"github.com/Axway/agent-sdk/pkg/apic/provisioning"
	"github.com/Axway/agent-sdk/pkg/config"
	"github.com/stretchr/testify/assert"
)

const envName = "env1"
const svcName = "svc1"
const ardID = "0987"

func TestMarketplaceMigrationForAPIKeyRevision(t *testing.T) {
	rev := newRevision(svcName, "api-key-revision")

	c := &mockMPMigClient{
		revisions: []*apiv1.ResourceInstance{
			rev,
		},
		instances: []*apiv1.ResourceInstance{
			newInstance(rev.Name, "inst1", "", []string{"api-key"}),
			newInstance(rev.Name, "inst2", "", []string{"api-key"}),
		},
	}
	cfg := &config.CentralConfiguration{
		Environment:      envName,
		APIServerVersion: "v1alpha1",
	}
	cm := cache2.NewAgentCacheManager(cfg, false)

	ard := mv1a.NewAccessRequestDefinition("api-key", envName)
	ard.Metadata.ID = "123"
	ri, _ := ard.AsInstance()

	cm.AddAccessRequestDefinition(ri)

	svc := mv1a.NewAPIService(svcName, envName)
	svcRI, _ := svc.AsInstance()

	mig := NewMarketplaceMigration(c, cfg, cm)
	_, err := mig.Migrate(svcRI)
	assert.Nil(t, err)

	assert.Equal(t, 2, c.updateCount)
}

func TestMarketplaceMigrationForOAuthRevision(t *testing.T) {
	rev := newOAuthRev(svcName, "oauth-revision")

	c := &mockMPMigClient{
		revisions: []*apiv1.ResourceInstance{
			rev,
		},
		instances: []*apiv1.ResourceInstance{
			newInstance(rev.Name, "inst1", "", []string{provisioning.OAuthPublicKeyCRD, provisioning.OAuthSecretCRD}),
		},
	}
	cfg := &config.CentralConfiguration{
		Environment:      envName,
		APIServerVersion: "v1alpha1",
	}
	cm := cache2.NewAgentCacheManager(cfg, false)

	ard := mv1a.NewAccessRequestDefinition("oauth", envName)
	ard.Metadata.ID = "0012"
	ri, _ := ard.AsInstance()

	cm.AddAccessRequestDefinition(ri)

	svc := mv1a.NewAPIService(svcName, envName)
	svcRI, _ := svc.AsInstance()

	mig := NewMarketplaceMigration(c, cfg, cm)
	_, err := mig.Migrate(svcRI)
	assert.Nil(t, err)

	assert.Equal(t, 1, c.updateCount)
	a, _ := cm.GetAccessRequestDefinitionByID(ardID)
	assert.NotNil(t, a)
}

func newInstance(revName, instName, ard string, credentialRequestDefinitions []string) *apiv1.ResourceInstance {
	inst := mv1a.NewAPIServiceInstance(instName, envName)
	inst.Spec = mv1a.ApiServiceInstanceSpec{
		ApiServiceRevision:           revName,
		AccessRequestDefinition:      ard,
		CredentialRequestDefinitions: credentialRequestDefinitions,
		Endpoint: []mv1a.ApiServiceInstanceSpecEndpoint{
			{
				Host:     "lbean004.lab.phx.axway.int",
				Port:     8065,
				Protocol: "https",
				Routing: mv1a.ApiServiceInstanceSpecRouting{
					BasePath: "/api1",
				},
			},
		},
	}
	ri, _ := inst.AsInstance()
	return ri
}

func newRevision(svcName, revName string) *apiv1.ResourceInstance {
	rev := mv1a.NewAPIServiceRevision(revName, envName)
	rev.Spec = mv1a.ApiServiceRevisionSpec{
		ApiService: svcName,
		Definition: mv1a.ApiServiceRevisionSpecDefinition{
			Type:  "oas2",
			Value: "ewogICJzd2FnZ2VyIiA6ICIyLjAiLAogICJpbmZvIiA6IHsKICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICJ2ZXJzaW9uIiA6ICIxLjAiLAogICAgInRpdGxlIiA6ICJhcGkxIgogIH0sCiAgImhvc3QiIDogImxiZWFuMDA0LmxhYi5waHguYXh3YXkuaW50OjgwNjUiLAogICJiYXNlUGF0aCIgOiAiL2FwaTEiLAogICJzY2hlbWVzIiA6IFsgImh0dHBzIiBdLAogICJzZWN1cml0eSIgOiBbIHsKICAgICJBUEkgS2V5IiA6IFsgXQogIH0gXSwKICAicGF0aHMiIDogewogICAgIi9ib29rL2lkL3tpZH0iIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkdFVCAvYm9vay9pZC97aWR9IiwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJuYW1lIiA6ICJpZCIsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMCByZXNwb25zZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwdXQiIDogewogICAgICAgICJvcGVyYXRpb25JZCIgOiAiVXBkYXRlQm9vayIsCiAgICAgICAgImNvbnN1bWVzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAibmFtZSIgOiAiaWQiLAogICAgICAgICAgImluIiA6ICJwYXRoIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiaW4iIDogImJvZHkiLAogICAgICAgICAgIm5hbWUiIDogIkJvb2siLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvQm9vayIKICAgICAgICAgIH0KICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIyMDAgcmVzcG9uc2UiCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiNDAwIHJlc3BvbnNlIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjQwNCByZXNwb25zZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkZWxldGUiIDogewogICAgICAgICJvcGVyYXRpb25JZCIgOiAiRGVsZXRlQm9va0J5SUQiLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgIm5hbWUiIDogImlkIiwKICAgICAgICAgICJpbiIgOiAicGF0aCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiMjAwIHJlc3BvbnNlIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjQwMCByZXNwb25zZSIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICI0MDQgcmVzcG9uc2UiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi9ib29rIiA6IHsKICAgICAgImdldCIgOiB7CiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJHRVQgL2Jvb2siLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMCByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0FycmF5T2ZCb29rIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAicG9zdCIgOiB7CiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJBZGRCb29rIiwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJpbiIgOiAiYm9keSIsCiAgICAgICAgICAibmFtZSIgOiAiQm9vayIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9Cb29rIgogICAgICAgICAgfQogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMSByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Jvb2siCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogICJzZWN1cml0eURlZmluaXRpb25zIiA6IHsKICAgICJBUEkgS2V5IiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBUEkgS2V5IiwKICAgICAgInR5cGUiIDogImFwaUtleSIsCiAgICAgICJuYW1lIiA6ICJLZXlJZCIsCiAgICAgICJpbiIgOiAiaGVhZGVyIgogICAgfQogIH0sCiAgImRlZmluaXRpb25zIiA6IHsKICAgICJCb29rIiA6IHsKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJib29rX2lkIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIGEgc3BlY2lmaWMgQm9vay4iCiAgICAgICAgfSwKICAgICAgICAidGl0bGUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpdGxlIG9mIHRoZSBib29rLiIKICAgICAgICB9LAogICAgICAgICJhdXRob3IiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkF1dGhvciBvZiB0aGUgYm9vay4iCiAgICAgICAgfSwKICAgICAgICAicGFnZXMiIDogewogICAgICAgICAgInR5cGUiIDogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgcGFnZXMgaW4gdGhlIGJvb2suIgogICAgICAgIH0sCiAgICAgICAgInllYXIiIDogewogICAgICAgICAgInR5cGUiIDogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJZZWFyIHRoZSBib29rIHdhcyBwdWJsaXNoZWQuIgogICAgICAgIH0sCiAgICAgICAgImluX3ByaW50IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJib29sZWFuIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiSXMgdGhlIGJvb2sgc3RpbGwgaW4gcHJpbnQuIgogICAgICAgIH0sCiAgICAgICAgImRlc2NyaXB0aW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmlwdGlvbiBvZiB0aGUgYm9vay4iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkFycmF5T2ZCb29rIiA6IHsKICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9Cb29rIgogICAgICB9CiAgICB9CiAgfSwKICAieC1heHdheSIgOiB7CiAgICAic2VydmljZVR5cGUiIDogInJlc3QiLAogICAgImJhc2VQYXRocyIgOiBbICJodHRwczovL2xiZWFuMDA0LmxhYi5waHguYXh3YXkuaW50OjgwNjUiIF0sCiAgICAiZXhwaXJlZCIgOiBmYWxzZSwKICAgICJyZXRpcmVtZW50RGF0ZSIgOiAwLAogICAgImNvcnNFbmFibGVkIiA6IHRydWUsCiAgICAiZGVwcmVjYXRlZCIgOiBmYWxzZSwKICAgICJhcGlSZXNvdXJjZVR5cGUiIDogInN3YWdnZXIxMWV4IiwKICAgICJpZCIgOiAiNWIzZmI0ZWYtYWQ4Ny00NGY1LTkyMDEtNTk5MmNhZjIzMDdlIiwKICAgICJzdGF0ZSIgOiAicHVibGlzaGVkIiwKICAgICJ0YWdzIiA6IHsKICAgICAgImRlbGV0ZW1lIiA6IFsgInRydWUiIF0sCiAgICAgICJ4Y190ZXN0IiA6IFsgInRydWUiIF0sCiAgICAgICJhbm90aGVyVGFnIiA6IFsgIm15VGFnVmFsdWUiIF0sCiAgICAgICJzdWJzY3JpcHRpb24iIDogWyAidHJ1ZSIgXQogICAgfQogIH0KfQ==",
		},
	}

	ri, _ := rev.AsInstance()
	return ri
}

func newOAuthRev(svcName, revName string) *v1.ResourceInstance {
	rev := mv1a.NewAPIServiceRevision(revName, envName)
	rev.Spec = mv1a.ApiServiceRevisionSpec{
		ApiService: svcName,
		Definition: mv1a.ApiServiceRevisionSpecDefinition{
			Type:  "oas2",
			Value: "ewogICJzd2FnZ2VyIiA6ICIyLjAiLAogICJpbmZvIiA6IHsKICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICJ2ZXJzaW9uIiA6ICIxLjAiLAogICAgInRpdGxlIiA6ICJhcGkyIgogIH0sCiAgImhvc3QiIDogImxiZWFuMDA0LmxhYi5waHguYXh3YXkuaW50OjgwNjUiLAogICJiYXNlUGF0aCIgOiAiL2FwaTIiLAogICJzY2hlbWVzIiA6IFsgImh0dHBzIiBdLAogICJzZWN1cml0eSIgOiBbIHsKICAgICJPQXV0aEltcGxpY2l0IiA6IFsgInJlc291cmNlLldSSVRFIiBdCiAgfSwgewogICAgIk9BdXRoSW1wbGljaXQiIDogWyAiIHJlc291cmNlLlJFQUQiIF0KICB9LCB7CiAgICAiT0F1dGhBY2Nlc3NDb2RlIiA6IFsgInJlc291cmNlLldSSVRFIiBdCiAgfSwgewogICAgIk9BdXRoQWNjZXNzQ29kZSIgOiBbICIgcmVzb3VyY2UuUkVBRCIgXQogIH0gXSwKICAicGF0aHMiIDogewogICAgIi9ib29rL2lkL3tpZH0iIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkdFVCAvYm9vay9pZC97aWR9IiwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJuYW1lIiA6ICJpZCIsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMCByZXNwb25zZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwdXQiIDogewogICAgICAgICJvcGVyYXRpb25JZCIgOiAiVXBkYXRlQm9vayIsCiAgICAgICAgImNvbnN1bWVzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAibmFtZSIgOiAiaWQiLAogICAgICAgICAgImluIiA6ICJwYXRoIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiaW4iIDogImJvZHkiLAogICAgICAgICAgIm5hbWUiIDogIkJvb2siLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvQm9vayIKICAgICAgICAgIH0KICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIyMDAgcmVzcG9uc2UiCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiNDAwIHJlc3BvbnNlIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjQwNCByZXNwb25zZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkZWxldGUiIDogewogICAgICAgICJvcGVyYXRpb25JZCIgOiAiRGVsZXRlQm9va0J5SUQiLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgIm5hbWUiIDogImlkIiwKICAgICAgICAgICJpbiIgOiAicGF0aCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiMjAwIHJlc3BvbnNlIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjQwMCByZXNwb25zZSIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICI0MDQgcmVzcG9uc2UiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi9ib29rIiA6IHsKICAgICAgImdldCIgOiB7CiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJHRVQgL2Jvb2siLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMCByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0FycmF5T2ZCb29rIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAicG9zdCIgOiB7CiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJBZGRCb29rIiwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJpbiIgOiAiYm9keSIsCiAgICAgICAgICAibmFtZSIgOiAiQm9vayIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9Cb29rIgogICAgICAgICAgfQogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMSByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Jvb2siCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogICJzZWN1cml0eURlZmluaXRpb25zIiA6IHsKICAgICJPQXV0aEltcGxpY2l0IiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJPQXV0aCIsCiAgICAgICJ0eXBlIiA6ICJvYXV0aDIiLAogICAgICAiYXV0aG9yaXphdGlvblVybCIgOiAiaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4OS9hcGkvb2F1dGgvYXV0aG9yaXplIiwKICAgICAgImZsb3ciIDogImltcGxpY2l0IiwKICAgICAgInNjb3BlcyIgOiB7CiAgICAgICAgInJlc291cmNlLldSSVRFIiA6ICIiLAogICAgICAgICIgcmVzb3VyY2UuUkVBRCIgOiAiIgogICAgICB9LAogICAgICAieC1heHdheSIgOiB7CiAgICAgICAgImFjY2Vzc1Rva2VuTG9jYXRpb25RdWVyeVN0cmluZyIgOiAiQmVhcmVyIiwKICAgICAgICAidG9rZW5OYW1lIiA6ICJhY2Nlc3NfdG9rZW4iLAogICAgICAgICJzY29wZXNNYXRjaGluZyIgOiAiQW55IiwKICAgICAgICAiYWNjZXNzVG9rZW5Mb2NhdGlvbiIgOiAiSEVBREVSIiwKICAgICAgICAidHlwZURpc3BsYXlOYW1lIiA6ICJPQXV0aCAyLjAiLAogICAgICAgICJhdXRob3JpemF0aW9uSGVhZGVyUHJlZml4IiA6ICIiCiAgICAgIH0KICAgIH0sCiAgICAiT0F1dGhBY2Nlc3NDb2RlIiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJPQXV0aCIsCiAgICAgICJ0eXBlIiA6ICJvYXV0aDIiLAogICAgICAiYXV0aG9yaXphdGlvblVybCIgOiAiaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4OS9hcGkvb2F1dGgvYXV0aG9yaXplIiwKICAgICAgInRva2VuVXJsIiA6ICJodHRwczovL2xvY2FsaG9zdDo4MDg5L2FwaS9vYXV0aC90b2tlbiIsCiAgICAgICJmbG93IiA6ICJhY2Nlc3NDb2RlIiwKICAgICAgInNjb3BlcyIgOiB7CiAgICAgICAgInJlc291cmNlLldSSVRFIiA6ICIiLAogICAgICAgICIgcmVzb3VyY2UuUkVBRCIgOiAiIgogICAgICB9LAogICAgICAieC1heHdheSIgOiB7CiAgICAgICAgImNsaWVudFNlY3JldE5hbWUiIDogImNsaWVudF9zZWNyZXQiLAogICAgICAgICJhdXRob3JpemF0aW9uSGVhZGVyUHJlZml4IiA6ICIiLAogICAgICAgICJhY2Nlc3NUb2tlbkxvY2F0aW9uUXVlcnlTdHJpbmciIDogIkJlYXJlciIsCiAgICAgICAgImNsaWVudElkTmFtZSIgOiAiY2xpZW50X2lkIiwKICAgICAgICAidG9rZW5OYW1lIiA6ICJhY2Nlc3NfY29kZSIsCiAgICAgICAgInNjb3Blc01hdGNoaW5nIiA6ICJBbnkiLAogICAgICAgICJhY2Nlc3NUb2tlbkxvY2F0aW9uIiA6ICJIRUFERVIiLAogICAgICAgICJ0eXBlRGlzcGxheU5hbWUiIDogIk9BdXRoIDIuMCIKICAgICAgfQogICAgfQogIH0sCiAgImRlZmluaXRpb25zIiA6IHsKICAgICJCb29rIiA6IHsKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJib29rX2lkIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIGEgc3BlY2lmaWMgQm9vay4iCiAgICAgICAgfSwKICAgICAgICAidGl0bGUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpdGxlIG9mIHRoZSBib29rLiIKICAgICAgICB9LAogICAgICAgICJhdXRob3IiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkF1dGhvciBvZiB0aGUgYm9vay4iCiAgICAgICAgfSwKICAgICAgICAicGFnZXMiIDogewogICAgICAgICAgInR5cGUiIDogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgcGFnZXMgaW4gdGhlIGJvb2suIgogICAgICAgIH0sCiAgICAgICAgInllYXIiIDogewogICAgICAgICAgInR5cGUiIDogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJZZWFyIHRoZSBib29rIHdhcyBwdWJsaXNoZWQuIgogICAgICAgIH0sCiAgICAgICAgImluX3ByaW50IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJib29sZWFuIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiSXMgdGhlIGJvb2sgc3RpbGwgaW4gcHJpbnQuIgogICAgICAgIH0sCiAgICAgICAgImRlc2NyaXB0aW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmlwdGlvbiBvZiB0aGUgYm9vay4iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkFycmF5T2ZCb29rIiA6IHsKICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9Cb29rIgogICAgICB9CiAgICB9CiAgfSwKICAieC1heHdheSIgOiB7CiAgICAic2VydmljZVR5cGUiIDogInJlc3QiLAogICAgImJhc2VQYXRocyIgOiBbICJodHRwczovL2xiZWFuMDA0LmxhYi5waHguYXh3YXkuaW50OjgwNjUiIF0sCiAgICAiZXhwaXJlZCIgOiBmYWxzZSwKICAgICJyZXRpcmVtZW50RGF0ZSIgOiAwLAogICAgImNvcnNFbmFibGVkIiA6IHRydWUsCiAgICAiZGVwcmVjYXRlZCIgOiBmYWxzZSwKICAgICJhcGlSZXNvdXJjZVR5cGUiIDogInN3YWdnZXIxMWV4IiwKICAgICJpZCIgOiAiNjQ4ZTAyNmMtMDM0Yy00NTU1LWE2MWYtNjU4MWQwNTdiNmVlIiwKICAgICJzdGF0ZSIgOiAicHVibGlzaGVkIiwKICAgICJ0YWdzIiA6IHsKICAgICAgImRlbGV0ZW1lIiA6IFsgInRydWUiIF0sCiAgICAgICJ4Y190ZXN0IiA6IFsgInRydWUiIF0sCiAgICAgICJhbm90aGVyVGFnIiA6IFsgIm15VGFnVmFsdWUiIF0sCiAgICAgICJzdWJzY3JpcHRpb24iIDogWyAidHJ1ZSIgXQogICAgfQogIH0KfQ==",
		},
	}

	ri, _ := rev.AsInstance()
	return ri
}

type mockMPMigClient struct {
	sync.Mutex
	updateCount     int
	createSubCalled bool
	revisions       []*apiv1.ResourceInstance
	instances       []*apiv1.ResourceInstance
}

func (m *mockMPMigClient) ExecuteAPI(_, _ string, _ map[string]string, _ []byte) ([]byte, error) {
	return nil, nil
}

func (m *mockMPMigClient) GetAPIV1ResourceInstancesWithPageSize(_ map[string]string, url string, _ int) ([]*apiv1.ResourceInstance, error) {
	if strings.Contains(url, "instances") {
		return m.instances, nil
	}
	return m.revisions, nil

}

func (m *mockMPMigClient) UpdateAPIV1ResourceInstance(_ string, _ *apiv1.ResourceInstance) (*apiv1.ResourceInstance, error) {
	return nil, nil
}

func (m *mockMPMigClient) CreateSubResourceScoped(_ apiv1.ResourceMeta, _ map[string]interface{}) error {
	return nil
}

func (m *mockMPMigClient) CreateSubResource(_ apiv1.ResourceMeta, _ map[string]interface{}) error {
	m.createSubCalled = true
	return nil
}

func (m *mockMPMigClient) UpdateResourceInstance(_ apiv1.Interface) (*apiv1.ResourceInstance, error) {
	m.Lock()
	defer m.Unlock()
	m.updateCount = m.updateCount + 1
	return nil, nil
}

func (m *mockMPMigClient) CreateOrUpdateResource(i apiv1.Interface) (*apiv1.ResourceInstance, error) {
	ri, _ := i.AsInstance()
	ri.Metadata.ID = ardID
	return ri, nil
}
