package migrate

import (
	"strings"
	"sync"
	"testing"

	cache2 "github.com/Axway/agent-sdk/pkg/agent/cache"
	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
	v1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
	mv1a "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/management/v1alpha1"
	"github.com/Axway/agent-sdk/pkg/config"
	"github.com/stretchr/testify/assert"
)

const envName = "env1"
const svcName = "svc1"

func TestMarketplaceMigration(t *testing.T) {
	rev := newRevision(svcName, "rev1")

	c := &mockMPMigClient{
		revisions: []*v1.ResourceInstance{
			rev,
		},
		instances: []*v1.ResourceInstance{
			newInstance(rev.Name, "inst1", ""),
			newInstance(rev.Name, "inst2", ""),
		},
	}
	cfg := &config.CentralConfiguration{
		Environment:      envName,
		APIServerVersion: "v1alpha1",
	}

	ard := mv1a.NewAccessRequestDefinition("api-key", envName)
	ard.Metadata.ID = "123"
	ri, _ := ard.AsInstance()
	cm := cache2.NewAgentCacheManager(cfg, false)

	cm.AddAccessRequestDefinition(ri)

	svc := mv1a.NewAPIService(svcName, envName)
	svcRI, _ := svc.AsInstance()

	mig := NewMarketplaceMigration(c, cfg, cm)
	_, err := mig.Migrate(svcRI)
	assert.Nil(t, err)

	assert.Equal(t, 2, c.updateCount)
}

func newInstance(revName, instName, ard string) *v1.ResourceInstance {
	inst := mv1a.NewAPIServiceInstance(instName, envName)
	inst.Spec = mv1a.ApiServiceInstanceSpec{
		ApiServiceRevision:           revName,
		AccessRequestDefinition:      ard,
		CredentialRequestDefinitions: []string{"api-key"},
		Endpoint: []mv1a.ApiServiceInstanceSpecEndpoint{
			{
				Host:     "lbean004.lab.phx.axway.int",
				Port:     8065,
				Protocol: "https",
				Routing: mv1a.ApiServiceInstanceSpecRouting{
					BasePath: "/api1",
				},
			},
		},
	}
	ri, _ := inst.AsInstance()
	return ri
}

func newRevision(svcName, revName string) *v1.ResourceInstance {
	rev := mv1a.NewAPIServiceRevision(revName, envName)
	rev.Spec = mv1a.ApiServiceRevisionSpec{
		ApiService: svcName,
		Definition: mv1a.ApiServiceRevisionSpecDefinition{
			Type:  "oas2",
			Value: "ewogICJzd2FnZ2VyIiA6ICIyLjAiLAogICJpbmZvIiA6IHsKICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICJ2ZXJzaW9uIiA6ICIxLjAiLAogICAgInRpdGxlIiA6ICJhcGkxIgogIH0sCiAgImhvc3QiIDogImxiZWFuMDA0LmxhYi5waHguYXh3YXkuaW50OjgwNjUiLAogICJiYXNlUGF0aCIgOiAiL2FwaTEiLAogICJzY2hlbWVzIiA6IFsgImh0dHBzIiBdLAogICJzZWN1cml0eSIgOiBbIHsKICAgICJBUEkgS2V5IiA6IFsgXQogIH0gXSwKICAicGF0aHMiIDogewogICAgIi9ib29rL2lkL3tpZH0iIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkdFVCAvYm9vay9pZC97aWR9IiwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJuYW1lIiA6ICJpZCIsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMCByZXNwb25zZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwdXQiIDogewogICAgICAgICJvcGVyYXRpb25JZCIgOiAiVXBkYXRlQm9vayIsCiAgICAgICAgImNvbnN1bWVzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAibmFtZSIgOiAiaWQiLAogICAgICAgICAgImluIiA6ICJwYXRoIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiaW4iIDogImJvZHkiLAogICAgICAgICAgIm5hbWUiIDogIkJvb2siLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvQm9vayIKICAgICAgICAgIH0KICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICIyMDAgcmVzcG9uc2UiCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiNDAwIHJlc3BvbnNlIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjQwNCByZXNwb25zZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkZWxldGUiIDogewogICAgICAgICJvcGVyYXRpb25JZCIgOiAiRGVsZXRlQm9va0J5SUQiLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgIm5hbWUiIDogImlkIiwKICAgICAgICAgICJpbiIgOiAicGF0aCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiMjAwIHJlc3BvbnNlIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjQwMCByZXNwb25zZSIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICI0MDQgcmVzcG9uc2UiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi9ib29rIiA6IHsKICAgICAgImdldCIgOiB7CiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJHRVQgL2Jvb2siLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMCByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0FycmF5T2ZCb29rIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAicG9zdCIgOiB7CiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJBZGRCb29rIiwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJpbiIgOiAiYm9keSIsCiAgICAgICAgICAibmFtZSIgOiAiQm9vayIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9Cb29rIgogICAgICAgICAgfQogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIjIwMSByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Jvb2siCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogICJzZWN1cml0eURlZmluaXRpb25zIiA6IHsKICAgICJBUEkgS2V5IiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBUEkgS2V5IiwKICAgICAgInR5cGUiIDogImFwaUtleSIsCiAgICAgICJuYW1lIiA6ICJLZXlJZCIsCiAgICAgICJpbiIgOiAiaGVhZGVyIgogICAgfQogIH0sCiAgImRlZmluaXRpb25zIiA6IHsKICAgICJCb29rIiA6IHsKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJib29rX2lkIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIGEgc3BlY2lmaWMgQm9vay4iCiAgICAgICAgfSwKICAgICAgICAidGl0bGUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpdGxlIG9mIHRoZSBib29rLiIKICAgICAgICB9LAogICAgICAgICJhdXRob3IiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkF1dGhvciBvZiB0aGUgYm9vay4iCiAgICAgICAgfSwKICAgICAgICAicGFnZXMiIDogewogICAgICAgICAgInR5cGUiIDogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgcGFnZXMgaW4gdGhlIGJvb2suIgogICAgICAgIH0sCiAgICAgICAgInllYXIiIDogewogICAgICAgICAgInR5cGUiIDogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJZZWFyIHRoZSBib29rIHdhcyBwdWJsaXNoZWQuIgogICAgICAgIH0sCiAgICAgICAgImluX3ByaW50IiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJib29sZWFuIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiSXMgdGhlIGJvb2sgc3RpbGwgaW4gcHJpbnQuIgogICAgICAgIH0sCiAgICAgICAgImRlc2NyaXB0aW9uIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmlwdGlvbiBvZiB0aGUgYm9vay4iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkFycmF5T2ZCb29rIiA6IHsKICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9Cb29rIgogICAgICB9CiAgICB9CiAgfSwKICAieC1heHdheSIgOiB7CiAgICAic2VydmljZVR5cGUiIDogInJlc3QiLAogICAgImJhc2VQYXRocyIgOiBbICJodHRwczovL2xiZWFuMDA0LmxhYi5waHguYXh3YXkuaW50OjgwNjUiIF0sCiAgICAiZXhwaXJlZCIgOiBmYWxzZSwKICAgICJyZXRpcmVtZW50RGF0ZSIgOiAwLAogICAgImNvcnNFbmFibGVkIiA6IHRydWUsCiAgICAiZGVwcmVjYXRlZCIgOiBmYWxzZSwKICAgICJhcGlSZXNvdXJjZVR5cGUiIDogInN3YWdnZXIxMWV4IiwKICAgICJpZCIgOiAiNWIzZmI0ZWYtYWQ4Ny00NGY1LTkyMDEtNTk5MmNhZjIzMDdlIiwKICAgICJzdGF0ZSIgOiAicHVibGlzaGVkIiwKICAgICJ0YWdzIiA6IHsKICAgICAgImRlbGV0ZW1lIiA6IFsgInRydWUiIF0sCiAgICAgICJ4Y190ZXN0IiA6IFsgInRydWUiIF0sCiAgICAgICJhbm90aGVyVGFnIiA6IFsgIm15VGFnVmFsdWUiIF0sCiAgICAgICJzdWJzY3JpcHRpb24iIDogWyAidHJ1ZSIgXQogICAgfQogIH0KfQ==",
		},
	}

	ri, _ := rev.AsInstance()
	return ri
}

type mockMPMigClient struct {
	sync.Mutex
	updateCount int
	revisions   []*v1.ResourceInstance
	instances   []*v1.ResourceInstance
}

func (m *mockMPMigClient) ExecuteAPI(method, url string, queryParam map[string]string, buffer []byte) ([]byte, error) {
	return nil, nil
}

func (m *mockMPMigClient) GetAPIV1ResourceInstancesWithPageSize(_ map[string]string, url string, _ int) ([]*apiv1.ResourceInstance, error) {
	if strings.Contains(url, "instances") {
		return m.instances, nil
	} else {
		return m.revisions, nil
	}
}

func (m *mockMPMigClient) UpdateAPIV1ResourceInstance(url string, ri *apiv1.ResourceInstance) (*apiv1.ResourceInstance, error) {
	return nil, nil
}

func (m *mockMPMigClient) CreateSubResourceScoped(rm apiv1.ResourceMeta, subs map[string]interface{}) error {
	return nil
}

func (m *mockMPMigClient) UpdateResourceInstance(ri *apiv1.ResourceInstance) (*apiv1.ResourceInstance, error) {
	m.Lock()
	defer m.Unlock()
	m.updateCount = m.updateCount + 1
	return nil, nil
}

func (m *mockMPMigClient) CreateOrUpdateResource(data apiv1.Interface) (*apiv1.ResourceInstance, error) {
	return nil, nil
}
