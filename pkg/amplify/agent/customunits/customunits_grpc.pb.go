// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: customunits/customunits.proto

package customunits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MetricReportingService_MetricReporting_FullMethodName = "/amplify.agent.customunits.MetricReportingService/MetricReporting"
)

// MetricReportingServiceClient is the client API for MetricReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricReportingServiceClient interface {
	// The agent will initiate the connection to the service and the service can then begin to send metric data for the SDK to handle
	MetricReporting(ctx context.Context, in *MetricServiceInit, opts ...grpc.CallOption) (MetricReportingService_MetricReportingClient, error)
}

type metricReportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricReportingServiceClient(cc grpc.ClientConnInterface) MetricReportingServiceClient {
	return &metricReportingServiceClient{cc}
}

func (c *metricReportingServiceClient) MetricReporting(ctx context.Context, in *MetricServiceInit, opts ...grpc.CallOption) (MetricReportingService_MetricReportingClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetricReportingService_ServiceDesc.Streams[0], MetricReportingService_MetricReporting_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &metricReportingServiceMetricReportingClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricReportingService_MetricReportingClient interface {
	Recv() (*MetricReport, error)
	grpc.ClientStream
}

type metricReportingServiceMetricReportingClient struct {
	grpc.ClientStream
}

func (x *metricReportingServiceMetricReportingClient) Recv() (*MetricReport, error) {
	m := new(MetricReport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricReportingServiceServer is the server API for MetricReportingService service.
// All implementations must embed UnimplementedMetricReportingServiceServer
// for forward compatibility
type MetricReportingServiceServer interface {
	// The agent will initiate the connection to the service and the service can then begin to send metric data for the SDK to handle
	MetricReporting(*MetricServiceInit, MetricReportingService_MetricReportingServer) error
	mustEmbedUnimplementedMetricReportingServiceServer()
}

// UnimplementedMetricReportingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricReportingServiceServer struct {
}

func (UnimplementedMetricReportingServiceServer) MetricReporting(*MetricServiceInit, MetricReportingService_MetricReportingServer) error {
	return status.Errorf(codes.Unimplemented, "method MetricReporting not implemented")
}
func (UnimplementedMetricReportingServiceServer) mustEmbedUnimplementedMetricReportingServiceServer() {
}

// UnsafeMetricReportingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricReportingServiceServer will
// result in compilation errors.
type UnsafeMetricReportingServiceServer interface {
	mustEmbedUnimplementedMetricReportingServiceServer()
}

func RegisterMetricReportingServiceServer(s grpc.ServiceRegistrar, srv MetricReportingServiceServer) {
	s.RegisterService(&MetricReportingService_ServiceDesc, srv)
}

func _MetricReportingService_MetricReporting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricServiceInit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricReportingServiceServer).MetricReporting(m, &metricReportingServiceMetricReportingServer{ServerStream: stream})
}

type MetricReportingService_MetricReportingServer interface {
	Send(*MetricReport) error
	grpc.ServerStream
}

type metricReportingServiceMetricReportingServer struct {
	grpc.ServerStream
}

func (x *metricReportingServiceMetricReportingServer) Send(m *MetricReport) error {
	return x.ServerStream.SendMsg(m)
}

// MetricReportingService_ServiceDesc is the grpc.ServiceDesc for MetricReportingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricReportingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "amplify.agent.customunits.MetricReportingService",
	HandlerType: (*MetricReportingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MetricReporting",
			Handler:       _MetricReportingService_MetricReporting_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customunits/customunits.proto",
}

const (
	QuotaEnforcement_QuotaEnforcementInfo_FullMethodName = "/amplify.agent.customunits.QuotaEnforcement/QuotaEnforcementInfo"
)

// QuotaEnforcementClient is the client API for QuotaEnforcement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaEnforcementClient interface {
	// The discovery agent will reach out, if configured, to allow the external service to provision any quota enforcement or access it may need to
	QuotaEnforcementInfo(ctx context.Context, in *QuotaInfo, opts ...grpc.CallOption) (*QuotaEnforcementResponse, error)
}

type quotaEnforcementClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaEnforcementClient(cc grpc.ClientConnInterface) QuotaEnforcementClient {
	return &quotaEnforcementClient{cc}
}

func (c *quotaEnforcementClient) QuotaEnforcementInfo(ctx context.Context, in *QuotaInfo, opts ...grpc.CallOption) (*QuotaEnforcementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaEnforcementResponse)
	err := c.cc.Invoke(ctx, QuotaEnforcement_QuotaEnforcementInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaEnforcementServer is the server API for QuotaEnforcement service.
// All implementations must embed UnimplementedQuotaEnforcementServer
// for forward compatibility
type QuotaEnforcementServer interface {
	// The discovery agent will reach out, if configured, to allow the external service to provision any quota enforcement or access it may need to
	QuotaEnforcementInfo(context.Context, *QuotaInfo) (*QuotaEnforcementResponse, error)
	mustEmbedUnimplementedQuotaEnforcementServer()
}

// UnimplementedQuotaEnforcementServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaEnforcementServer struct {
}

func (UnimplementedQuotaEnforcementServer) QuotaEnforcementInfo(context.Context, *QuotaInfo) (*QuotaEnforcementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuotaEnforcementInfo not implemented")
}
func (UnimplementedQuotaEnforcementServer) mustEmbedUnimplementedQuotaEnforcementServer() {}

// UnsafeQuotaEnforcementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaEnforcementServer will
// result in compilation errors.
type UnsafeQuotaEnforcementServer interface {
	mustEmbedUnimplementedQuotaEnforcementServer()
}

func RegisterQuotaEnforcementServer(s grpc.ServiceRegistrar, srv QuotaEnforcementServer) {
	s.RegisterService(&QuotaEnforcement_ServiceDesc, srv)
}

func _QuotaEnforcement_QuotaEnforcementInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuotaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaEnforcementServer).QuotaEnforcementInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaEnforcement_QuotaEnforcementInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaEnforcementServer).QuotaEnforcementInfo(ctx, req.(*QuotaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaEnforcement_ServiceDesc is the grpc.ServiceDesc for QuotaEnforcement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaEnforcement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "amplify.agent.customunits.QuotaEnforcement",
	HandlerType: (*QuotaEnforcementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuotaEnforcementInfo",
			Handler:    _QuotaEnforcement_QuotaEnforcementInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customunits/customunits.proto",
}
