// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: correlation/correlation.proto

package correlation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CorrelationService_GetResourceContext_FullMethodName = "/amplify.agent.correlation.CorrelationService/GetResourceContext"
)

// CorrelationServiceClient is the client API for CorrelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Correlation service returns the resource context related to API transaction
type CorrelationServiceClient interface {
	GetResourceContext(ctx context.Context, in *TransactionContext, opts ...grpc.CallOption) (*ResourceContext, error)
}

type correlationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCorrelationServiceClient(cc grpc.ClientConnInterface) CorrelationServiceClient {
	return &correlationServiceClient{cc}
}

func (c *correlationServiceClient) GetResourceContext(ctx context.Context, in *TransactionContext, opts ...grpc.CallOption) (*ResourceContext, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceContext)
	err := c.cc.Invoke(ctx, CorrelationService_GetResourceContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CorrelationServiceServer is the server API for CorrelationService service.
// All implementations must embed UnimplementedCorrelationServiceServer
// for forward compatibility
//
// Correlation service returns the resource context related to API transaction
type CorrelationServiceServer interface {
	GetResourceContext(context.Context, *TransactionContext) (*ResourceContext, error)
	mustEmbedUnimplementedCorrelationServiceServer()
}

// UnimplementedCorrelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCorrelationServiceServer struct {
}

func (UnimplementedCorrelationServiceServer) GetResourceContext(context.Context, *TransactionContext) (*ResourceContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceContext not implemented")
}
func (UnimplementedCorrelationServiceServer) mustEmbedUnimplementedCorrelationServiceServer() {}

// UnsafeCorrelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CorrelationServiceServer will
// result in compilation errors.
type UnsafeCorrelationServiceServer interface {
	mustEmbedUnimplementedCorrelationServiceServer()
}

func RegisterCorrelationServiceServer(s grpc.ServiceRegistrar, srv CorrelationServiceServer) {
	s.RegisterService(&CorrelationService_ServiceDesc, srv)
}

func _CorrelationService_GetResourceContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorrelationServiceServer).GetResourceContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CorrelationService_GetResourceContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorrelationServiceServer).GetResourceContext(ctx, req.(*TransactionContext))
	}
	return interceptor(ctx, in, info, handler)
}

// CorrelationService_ServiceDesc is the grpc.ServiceDesc for CorrelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CorrelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "amplify.agent.correlation.CorrelationService",
	HandlerType: (*CorrelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceContext",
			Handler:    _CorrelationService_GetResourceContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "correlation/correlation.proto",
}
