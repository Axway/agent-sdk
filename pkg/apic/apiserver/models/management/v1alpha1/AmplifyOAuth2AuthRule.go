/*
 * This file is automatically generated
 */

package management

import (
	"encoding/json"
	"fmt"

	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"

	"github.com/Axway/agent-sdk/pkg/util/log"
)

var (
	AmplifyOAuth2AuthRuleCtx log.ContextField = "amplifyOAuth2AuthRule"

	_AmplifyOAuth2AuthRuleGVK = apiv1.GroupVersionKind{
		GroupKind: apiv1.GroupKind{
			Group: "management",
			Kind:  "AmplifyOAuth2AuthRule",
		},
		APIVersion: "v1alpha1",
	}

	AmplifyOAuth2AuthRuleScopes = []string{"VirtualAPI", "VirtualAPIRelease"}
)

const AmplifyOAuth2AuthRuleResourceName = "amplifyoauth2authrules"

func AmplifyOAuth2AuthRuleGVK() apiv1.GroupVersionKind {
	return _AmplifyOAuth2AuthRuleGVK
}

func init() {
	apiv1.RegisterGVK(_AmplifyOAuth2AuthRuleGVK, AmplifyOAuth2AuthRuleScopes[0], AmplifyOAuth2AuthRuleResourceName)
	log.RegisterContextField(AmplifyOAuth2AuthRuleCtx)
}

// AmplifyOAuth2AuthRule Resource
type AmplifyOAuth2AuthRule struct {
	apiv1.ResourceMeta
	Owner *apiv1.Owner              `json:"owner"`
	Spec  AmplifyOAuth2AuthRuleSpec `json:"spec"`
}

// NewAmplifyOAuth2AuthRule creates an empty *AmplifyOAuth2AuthRule
func NewAmplifyOAuth2AuthRule(name, scopeKind, scopeName string) (*AmplifyOAuth2AuthRule, error) {
	validScope := false
	for _, s := range AmplifyOAuth2AuthRuleScopes {
		if scopeKind == s {
			validScope = true
			break
		}
	}
	if !validScope {
		return nil, fmt.Errorf("scope '%s' not valid for AmplifyOAuth2AuthRule kind", scopeKind)
	}

	return &AmplifyOAuth2AuthRule{
		ResourceMeta: apiv1.ResourceMeta{
			Name:             name,
			GroupVersionKind: _AmplifyOAuth2AuthRuleGVK,
			Metadata: apiv1.Metadata{
				Scope: apiv1.MetadataScope{
					Name: scopeName,
					Kind: scopeKind,
				},
			},
		},
	}, nil
}

// AmplifyOAuth2AuthRuleFromInstanceArray converts a []*ResourceInstance to a []*AmplifyOAuth2AuthRule
func AmplifyOAuth2AuthRuleFromInstanceArray(fromArray []*apiv1.ResourceInstance) ([]*AmplifyOAuth2AuthRule, error) {
	newArray := make([]*AmplifyOAuth2AuthRule, 0)
	for _, item := range fromArray {
		res := &AmplifyOAuth2AuthRule{}
		err := res.FromInstance(item)
		if err != nil {
			return make([]*AmplifyOAuth2AuthRule, 0), err
		}
		newArray = append(newArray, res)
	}

	return newArray, nil
}

// AsInstance converts a AmplifyOAuth2AuthRule to a ResourceInstance
func (res *AmplifyOAuth2AuthRule) AsInstance() (*apiv1.ResourceInstance, error) {
	meta := res.ResourceMeta
	meta.GroupVersionKind = AmplifyOAuth2AuthRuleGVK()
	res.ResourceMeta = meta

	m, err := json.Marshal(res)
	if err != nil {
		return nil, err
	}

	instance := apiv1.ResourceInstance{}
	err = json.Unmarshal(m, &instance)
	if err != nil {
		return nil, err
	}

	return &instance, nil
}

// FromInstance converts a ResourceInstance to a AmplifyOAuth2AuthRule
func (res *AmplifyOAuth2AuthRule) FromInstance(ri *apiv1.ResourceInstance) error {
	if ri == nil {
		res = nil
		return nil
	}
	var err error
	rawResource := ri.GetRawResource()
	if rawResource == nil {
		rawResource, err = json.Marshal(ri)
		if err != nil {
			return err
		}
	}
	err = json.Unmarshal(rawResource, res)
	return err
}

// MarshalJSON custom marshaller to handle sub resources
func (res *AmplifyOAuth2AuthRule) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(&res.ResourceMeta)
	if err != nil {
		return nil, err
	}

	var out map[string]interface{}
	err = json.Unmarshal(m, &out)
	if err != nil {
		return nil, err
	}

	out["owner"] = res.Owner
	out["spec"] = res.Spec

	return json.Marshal(out)
}

// UnmarshalJSON custom unmarshaller to handle sub resources
func (res *AmplifyOAuth2AuthRule) UnmarshalJSON(data []byte) error {
	var err error

	aux := &apiv1.ResourceInstance{}
	err = json.Unmarshal(data, aux)
	if err != nil {
		return err
	}

	res.ResourceMeta = aux.ResourceMeta
	res.Owner = aux.Owner

	// ResourceInstance holds the spec as a map[string]interface{}.
	// Convert it to bytes, then convert to the spec type for the resource.
	sr, err := json.Marshal(aux.Spec)
	if err != nil {
		return err
	}

	err = json.Unmarshal(sr, &res.Spec)
	if err != nil {
		return err
	}

	return nil
}

// PluralName returns the plural name of the resource
func (res *AmplifyOAuth2AuthRule) PluralName() string {
	return AmplifyOAuth2AuthRuleResourceName
}
