/*
 * This file is automatically generated
 */

package v1alpha1

import (
	"encoding/json"

	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
)

var (
	_K8SClusterGVK = apiv1.GroupVersionKind{
		GroupKind: apiv1.GroupKind{
			Group: "management",
			Kind:  "K8SCluster",
		},
		APIVersion: "v1alpha1",
	}

	K8SClusterScopes = []string{""}
)

const K8SClusterResourceName = "k8sclusters"

func K8SClusterGVK() apiv1.GroupVersionKind {
	return _K8SClusterGVK
}

func init() {
	apiv1.RegisterGVK(_K8SClusterGVK, K8SClusterScopes[0], K8SClusterResourceName)
}

// K8SCluster Resource
type K8SCluster struct {
	apiv1.ResourceMeta
	Owner *apiv1.Owner   `json:"owner"`
	Spec  K8SClusterSpec `json:"spec"`
}

// FromInstance converts a ResourceInstance to a K8SCluster
func (res *K8SCluster) FromInstance(ri *apiv1.ResourceInstance) error {
	if ri == nil {
		res = nil
		return nil
	}

	var err error
	rawResource := ri.GetRawResource()
	if rawResource == nil {
		rawResource, err = json.Marshal(ri)
		if err != nil {
			return err
		}
	}

	err = json.Unmarshal(rawResource, res)
	return err
}

// K8SClusterFromInstanceArray converts a []*ResourceInstance to a []*K8SCluster
func K8SClusterFromInstanceArray(fromArray []*apiv1.ResourceInstance) ([]*K8SCluster, error) {
	newArray := make([]*K8SCluster, 0)
	for _, item := range fromArray {
		res := &K8SCluster{}
		err := res.FromInstance(item)
		if err != nil {
			return make([]*K8SCluster, 0), err
		}
		newArray = append(newArray, res)
	}

	return newArray, nil
}

// AsInstance converts a K8SCluster to a ResourceInstance
func (res *K8SCluster) AsInstance() (*apiv1.ResourceInstance, error) {
	meta := res.ResourceMeta
	meta.GroupVersionKind = K8SClusterGVK()
	res.ResourceMeta = meta

	m, err := json.Marshal(res)
	if err != nil {
		return nil, err
	}

	instance := apiv1.ResourceInstance{}
	err = json.Unmarshal(m, &instance)
	if err != nil {
		return nil, err
	}

	return &instance, nil
}

// MarshalJSON custom marshaller to handle sub resources
func (res *K8SCluster) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(&res.ResourceMeta)
	if err != nil {
		return nil, err
	}

	var out map[string]interface{}
	err = json.Unmarshal(m, &out)
	if err != nil {
		return nil, err
	}

	out["owner"] = res.Owner
	out["spec"] = res.Spec

	return json.Marshal(out)
}

// UnmarshalJSON custom unmarshaler to handle sub resources
func (res *K8SCluster) UnmarshalJSON(data []byte) error {
	var err error

	// Create an alias for unmarshalling to avoid a circular UnmarshalJSON call
	type Alias K8SCluster
	aux := &struct{ *Alias }{
		Alias: (*Alias)(res),
	}

	err = json.Unmarshal(data, &aux)
	if err != nil {
		return err
	}

	// The only field that will properly unmarshal will be the ResourceMeta field.
	// This is because ResourceMeta is embedded on all resources, and when UnmarshalJSON is called on the Alias,
	// the ResourceMeta UnmarshalJSON will be called instead of the default UnmarshalJSON, which would handle all fields.
	// The rest of the fields need to be unmarshalled manually.
	res.ResourceMeta = aux.ResourceMeta

	// unmarshall all fields into a map
	out := map[string]interface{}{}

	err = json.Unmarshal(data, &out)
	if err != nil {
		return err
	}

	// unmarshall the owner field
	if out["owner"] != nil {
		res.Owner = &apiv1.Owner{}
		bts, err := json.Marshal(out["owner"])
		if err != nil {
			return err
		}
		err = json.Unmarshal(bts, res.Owner)
		if err != nil {
			return err
		}
	}

	// unmarshall the spec field
	if out["spec"] != nil {
		bts, err := json.Marshal(out["spec"])
		if err != nil {
			return err
		}
		err = json.Unmarshal(bts, &res.Spec)
		if err != nil {
			return err
		}
	}

	return nil
}
