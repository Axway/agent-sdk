/*
 * This file is automatically generated
 */

package management

import (
	"encoding/json"

	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"

	"github.com/Axway/agent-sdk/pkg/util/log"
)

var (
	APIServiceInstanceCtx log.ContextField = "apiServiceInstance"

	_APIServiceInstanceGVK = apiv1.GroupVersionKind{
		GroupKind: apiv1.GroupKind{
			Group: "management",
			Kind:  "APIServiceInstance",
		},
		APIVersion: "v1alpha1",
	}

	APIServiceInstanceScopes = []string{"Environment"}
)

const (
	APIServiceInstanceResourceName                           = "apiserviceinstances"
	ApiServiceInstanceComplianceSubResourceName              = "compliance"
	ApiServiceInstanceComplianceruntimeresultSubResourceName = "complianceruntimeresult"
	ApiServiceInstanceLifecycleSubResourceName               = "lifecycle"
	ApiServiceInstanceReferencesSubResourceName              = "references"
	ApiServiceInstanceSamplestateSubResourceName             = "samplestate"
	ApiServiceInstanceSampletriggerSubResourceName           = "sampletrigger"
	ApiServiceInstanceSourceSubResourceName                  = "source"
	ApiServiceInstanceTraceableSubResourceName               = "traceable"
)

func APIServiceInstanceGVK() apiv1.GroupVersionKind {
	return _APIServiceInstanceGVK
}

func init() {
	apiv1.RegisterGVK(_APIServiceInstanceGVK, APIServiceInstanceScopes[0], APIServiceInstanceResourceName)
	log.RegisterContextField(APIServiceInstanceCtx)
}

// APIServiceInstance Resource
type APIServiceInstance struct {
	apiv1.ResourceMeta
	// GENERATE: The following code has been modified after code generation
	//
	//	Compliance              ApiServiceInstanceCompliance    `json:"compliance"`
	Compliance              *ApiServiceInstanceCompliance `json:"compliance,omitempty"`
	Complianceruntimeresult interface{}                   `json:"complianceruntimeresult"`
	// GENERATE: The following code has been modified after code generation
	//
	//	Lifecycle               ApiServiceInstanceLifecycle     `json:"lifecycle"`
	Lifecycle  *ApiServiceInstanceLifecycle `json:"lifecycle,omitempty"`
	Owner      *apiv1.Owner                 `json:"owner"`
	References ApiServiceInstanceReferences `json:"references"`
	// GENERATE: The following code has been modified after code generation
	//
	//	Samplestate ApiServiceInstanceSamplestate `json:"samplestate"`
	Samplestate *ApiServiceInstanceSamplestate `json:"samplestate,omitempty"`
	// GENERATE: The following code has been modified after code generation
	//
	//	Sampletrigger ApiServiceInstanceSampletrigger `json:"sampletrigger"`
	Sampletrigger *ApiServiceInstanceSampletrigger `json:"sampletrigger,omitempty"`
	// GENERATE: The following code has been modified after code generation
	//
	//	Source        ApiServiceInstanceSource        `json:"source"`
	Source *ApiServiceInstanceSource `json:"source,omitempty"`
	Spec   ApiServiceInstanceSpec    `json:"spec"`
	// GENERATE: The following code has been modified after code generation
	//
	//	Traceable ApiServiceInstanceTraceable `json:"traceable"`
	Traceable *ApiServiceInstanceTraceable `json:"traceable,omitempty"`
}

// NewAPIServiceInstance creates an empty *APIServiceInstance
func NewAPIServiceInstance(name, scopeName string) *APIServiceInstance {
	return &APIServiceInstance{
		ResourceMeta: apiv1.ResourceMeta{
			Name:             name,
			GroupVersionKind: _APIServiceInstanceGVK,
			Metadata: apiv1.Metadata{
				Scope: apiv1.MetadataScope{
					Name: scopeName,
					Kind: APIServiceInstanceScopes[0],
				},
			},
		},
	}
}

// APIServiceInstanceFromInstanceArray converts a []*ResourceInstance to a []*APIServiceInstance
func APIServiceInstanceFromInstanceArray(fromArray []*apiv1.ResourceInstance) ([]*APIServiceInstance, error) {
	newArray := make([]*APIServiceInstance, 0)
	for _, item := range fromArray {
		res := &APIServiceInstance{}
		err := res.FromInstance(item)
		if err != nil {
			return make([]*APIServiceInstance, 0), err
		}
		newArray = append(newArray, res)
	}

	return newArray, nil
}

// AsInstance converts a APIServiceInstance to a ResourceInstance
func (res *APIServiceInstance) AsInstance() (*apiv1.ResourceInstance, error) {
	meta := res.ResourceMeta
	meta.GroupVersionKind = APIServiceInstanceGVK()
	res.ResourceMeta = meta

	m, err := json.Marshal(res)
	if err != nil {
		return nil, err
	}

	instance := apiv1.ResourceInstance{}
	err = json.Unmarshal(m, &instance)
	if err != nil {
		return nil, err
	}
	instance.SubResourceHashes = res.SubResourceHashes
	return &instance, nil
}

// FromInstance converts a ResourceInstance to a APIServiceInstance
func (res *APIServiceInstance) FromInstance(ri *apiv1.ResourceInstance) error {
	if ri == nil {
		res = nil
		return nil
	}
	var err error
	rawResource := ri.GetRawResource()
	if rawResource == nil {
		rawResource, err = json.Marshal(ri)
		if err != nil {
			return err
		}
	}
	err = json.Unmarshal(rawResource, res)
	if err != nil {
		return err
	}
	res.SubResourceHashes = ri.SubResourceHashes
	return err
}

// MarshalJSON custom marshaller to handle sub resources
func (res *APIServiceInstance) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(&res.ResourceMeta)
	if err != nil {
		return nil, err
	}

	var out map[string]interface{}
	err = json.Unmarshal(m, &out)
	if err != nil {
		return nil, err
	}

	out["compliance"] = res.Compliance
	out["complianceruntimeresult"] = res.Complianceruntimeresult
	out["lifecycle"] = res.Lifecycle
	out["owner"] = res.Owner
	out["references"] = res.References
	out["samplestate"] = res.Samplestate
	out["sampletrigger"] = res.Sampletrigger
	out["source"] = res.Source
	out["spec"] = res.Spec
	out["traceable"] = res.Traceable

	return json.Marshal(out)
}

// UnmarshalJSON custom unmarshaller to handle sub resources
func (res *APIServiceInstance) UnmarshalJSON(data []byte) error {
	var err error

	aux := &apiv1.ResourceInstance{}
	err = json.Unmarshal(data, aux)
	if err != nil {
		return err
	}

	res.ResourceMeta = aux.ResourceMeta
	res.Owner = aux.Owner

	// ResourceInstance holds the spec as a map[string]interface{}.
	// Convert it to bytes, then convert to the spec type for the resource.
	sr, err := json.Marshal(aux.Spec)
	if err != nil {
		return err
	}

	err = json.Unmarshal(sr, &res.Spec)
	if err != nil {
		return err
	}

	// marshalling subresource Compliance
	if v, ok := aux.SubResources["compliance"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "compliance")
		err = json.Unmarshal(sr, &res.Compliance)
		if err != nil {
			return err
		}
	}

	// marshalling subresource Complianceruntimeresult
	if v, ok := aux.SubResources["complianceruntimeresult"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "complianceruntimeresult")
		err = json.Unmarshal(sr, &res.Complianceruntimeresult)
		if err != nil {
			return err
		}
	}

	// marshalling subresource Lifecycle
	if v, ok := aux.SubResources["lifecycle"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "lifecycle")
		err = json.Unmarshal(sr, &res.Lifecycle)
		if err != nil {
			return err
		}
	}

	// marshalling subresource References
	if v, ok := aux.SubResources["references"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "references")
		err = json.Unmarshal(sr, &res.References)
		if err != nil {
			return err
		}
	}

	// marshalling subresource Samplestate
	if v, ok := aux.SubResources["samplestate"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "samplestate")
		err = json.Unmarshal(sr, &res.Samplestate)
		if err != nil {
			return err
		}
	}

	// marshalling subresource Sampletrigger
	if v, ok := aux.SubResources["sampletrigger"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "sampletrigger")
		err = json.Unmarshal(sr, &res.Sampletrigger)
		if err != nil {
			return err
		}
	}

	// marshalling subresource Source
	if v, ok := aux.SubResources["source"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "source")
		err = json.Unmarshal(sr, &res.Source)
		if err != nil {
			return err
		}
	}

	// marshalling subresource Traceable
	if v, ok := aux.SubResources["traceable"]; ok {
		sr, err = json.Marshal(v)
		if err != nil {
			return err
		}

		delete(aux.SubResources, "traceable")
		err = json.Unmarshal(sr, &res.Traceable)
		if err != nil {
			return err
		}
	}

	return nil
}

// PluralName returns the plural name of the resource
func (res *APIServiceInstance) PluralName() string {
	return APIServiceInstanceResourceName
}
