package v1

// Error an error in an ErrorResponse
type Error struct {
	Status int                    `json:"status,omitempty"`
	Title  string                 `json:"title,omitempty"`
	Detail string                 `json:"detail,omitempty"`
	Meta   map[string]interface{} `json:"meta:,omitempty"`
}

// ErrorResponse Detail for standard error responses.
type ErrorResponse struct {
	Errors []Error `json:"errors,omitempty"`
}

// GroupKind the Group and Kind of the resource
type GroupKind struct {
	// Defines the group from which the resource belongs to. The server infers this from the endpoint the client submits the request to.
	Group string `json:"group,omitempty"`
	// Defines the kind of the resource. The server infers this from the endpoint the client submits the request to.
	Kind string `json:"kind,omitempty"`
}

// GroupVersionKind - The group, version & kind of the resource
type GroupVersionKind struct {
	GroupKind
	APIVersion string `json:"apiVersion,omitempty"`
}

// MetadataScope The scope where this resource was defined.
type MetadataScope struct {
	// Internal id of the scope resource where the resource is defined.
	ID string `json:"id,omitempty"`
	// The kind of the scope resource where the resource is defined.
	Kind string `json:"kind,omitempty"`
	// The name of the scope where the resource is defined.
	Name string `json:"name,omitempty"`
}

// Reference List of objects dependent by this object.
type Reference struct {
	// Unique id generated by the server.
	ID string `json:"id,omitempty"`
	// The kind of the resource that it is reffering to.
	Kind string `json:"kind,omitempty"`
	// The name of the resource that it is reffering to.
	Name string `json:"name,omitempty"`
	// The name of the scope of the resource that it is reffering to.
	Scope string `json:"scope,omitempty"`
	// Defines the type of the reference: * soft - spec property that has this reference will get nulled out if the referenced resource gets removed. * hard - dictates that the current resource will get removed when the referenced resource gets removed.
	Type string `json:"type,omitempty"`
}

// AuditMetadata Read-only metadata for the record.
type AuditMetadata struct {
	// The creation time.
	CreateTimestamp Time `json:"createTimestamp,omitempty"`
	// Id of the user that created the entity.
	CreateUserID string `json:"createUserId,omitempty"`
	// The last modification time.
	ModifyTimestamp Time `json:"modifyTimestamp,omitempty"`
	// Id of the user that last modified the entity.
	ModifyUserID string `json:"modifyUserId,omitempty"`
}

// Metadata Metadata that all server resources have. Data is generated by the server.
type Metadata struct {
	// Internal id of the resource.
	ID    string        `json:"id,omitempty"`
	Audit AuditMetadata `json:"audit,omitempty"`
	Scope MetadataScope `json:"scope,omitempty"`
	// Internal version of this object that can be used by clients to determine when objects have changed.
	ResourceVersion string      `json:"resourceVersion,omitempty"`
	References      []Reference `json:"references,omitempty"`
	// Defines the state of the resource. If present, indicates if the resource is in Deleting state.
	State string `json:"state,omitempty"`
}

// EventPayload -
type EventPayload struct {
	GroupKind
	Scope      MetadataScope     `json:"scope"`
	Tags       []string          `json:"tags"`
	Attributes map[string]string `json:"attributes"`
	ID         string            `json:"id"`
	Name       string            `json:"name"`
	References []Reference       `json:"references"`
}

// EventType -
type EventType string

const (
	// ResourceEntryCreatedEvent -
	ResourceEntryCreatedEvent EventType = "ResourceEntryCreatedEvent"
	// ResourceEntryDeletedEvent -
	ResourceEntryDeletedEvent EventType = "ResourceEntryDeletedEvent"
	// ResourceEntryUpdatedEvent -
	ResourceEntryUpdatedEvent EventType = "ResourceEntryUpdatedEvent"
)

// Event is an API Server event concerning a resource
type Event struct {
	ID      string
	Type    EventType
	Payload EventPayload
}

// Finalizer Finalizer on the API server resource.
type Finalizer struct {
	Name        string `json:"name"`
	Description string `json:"description,omitempty"`
}
