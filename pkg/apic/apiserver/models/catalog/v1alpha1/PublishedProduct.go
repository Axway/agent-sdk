/*
 * This file is automatically generated
 */

package v1alpha1

import (
	"encoding/json"

	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
)

var (
	_PublishedProductGVK = apiv1.GroupVersionKind{
		GroupKind: apiv1.GroupKind{
			Group: "catalog",
			Kind:  "PublishedProduct",
		},
		APIVersion: "v1alpha1",
	}

	PublishedProductScopes = []string{"Marketplace"}
)

const PublishedProductResourceName = "publishedproducts"

func PublishedProductGVK() apiv1.GroupVersionKind {
	return _PublishedProductGVK
}

func init() {
	apiv1.RegisterGVK(_PublishedProductGVK, PublishedProductScopes[0], PublishedProductResourceName)
}

// PublishedProduct Resource
type PublishedProduct struct {
	apiv1.ResourceMeta
	Owner      *apiv1.Owner               `json:"owner"`
	References PublishedProductReferences `json:"references"`
	Spec       PublishedProductSpec       `json:"spec"`
}

// PublishedProductFromInstanceArray converts a []*ResourceInstance to a []*PublishedProduct
func PublishedProductFromInstanceArray(fromArray []*apiv1.ResourceInstance) ([]*PublishedProduct, error) {
	newArray := make([]*PublishedProduct, 0)
	for _, item := range fromArray {
		res := &PublishedProduct{}
		err := res.FromInstance(item)
		if err != nil {
			return make([]*PublishedProduct, 0), err
		}
		newArray = append(newArray, res)
	}

	return newArray, nil
}

// AsInstance converts a PublishedProduct to a ResourceInstance
func (res *PublishedProduct) AsInstance() (*apiv1.ResourceInstance, error) {
	meta := res.ResourceMeta
	meta.GroupVersionKind = PublishedProductGVK()
	res.ResourceMeta = meta

	m, err := json.Marshal(res)
	if err != nil {
		return nil, err
	}

	instance := apiv1.ResourceInstance{}
	err = json.Unmarshal(m, &instance)
	if err != nil {
		return nil, err
	}

	return &instance, nil
}

// FromInstance converts a ResourceInstance to a PublishedProduct
func (res *PublishedProduct) FromInstance(ri *apiv1.ResourceInstance) error {
	if ri == nil {
		res = nil
		return nil
	}
	var err error
	rawResource := ri.GetRawResource()
	if rawResource == nil {
		rawResource, err = json.Marshal(ri)
		if err != nil {
			return err
		}
	}
	err = json.Unmarshal(rawResource, res)
	return err
}

// MarshalJSON custom marshaller to handle sub resources
func (res *PublishedProduct) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(&res.ResourceMeta)
	if err != nil {
		return nil, err
	}

	var out map[string]interface{}
	err = json.Unmarshal(m, &out)
	if err != nil {
		return nil, err
	}

	out["owner"] = res.Owner
	out["references"] = res.References
	out["spec"] = res.Spec

	return json.Marshal(out)
}

// UnmarshalJSON custom unmarshaler to handle sub resources
func (res *PublishedProduct) UnmarshalJSON(data []byte) error {
	var err error

	aux := &apiv1.ResourceInstance{}
	err = json.Unmarshal(data, aux)
	if err != nil {
		return err
	}

	res.ResourceMeta = aux.ResourceMeta
	res.Owner = aux.Owner

	sr, err := json.Marshal(aux.Spec)
	if err != nil {
		return err
	}

	err = json.Unmarshal(sr, &res.Spec)
	if err != nil {
		return err
	}

	sr, err = json.Marshal(aux.SubResources["references"])
	if err != nil {
		return err
	}

	err = json.Unmarshal(sr, &res.References)
	if err != nil {
		return err
	}

	return nil
}
