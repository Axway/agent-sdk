/*
 * This file is automatically generated
 */

package v1alpha1

import (
	v1 "git.ecd.axway.int/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/api/v1"
	"git.ecd.axway.int/apigov/apic_agents_sdk/pkg/apic/apiserver/models/definitions/v1alpha1"
)

// ResourceDefinitionClient -
type ResourceDefinitionClient struct {
	client *v1.Client
}

// NewResourceDefinitionClient -
func NewResourceDefinitionClient(cb *v1.ClientBase) (*ResourceDefinitionClient, error) {
	client, err := cb.ForKind(v1alpha1.ResourceDefinitionGVK())
	if err != nil {
		return nil, err
	}

	return &ResourceDefinitionClient{client}, nil
}

// WithScope -
func (c *ResourceDefinitionClient) WithScope(scope string) *ResourceDefinitionClient {
	return &ResourceDefinitionClient{
		c.client.WithScope(scope),
	}
}

// SetQuery -
func (c *ResourceDefinitionClient) SetQuery(query string) {
	c.client.SetQuery(query)
}

// List -
func (c *ResourceDefinitionClient) List() ([]*v1alpha1.ResourceDefinition, error) {
	riList, err := c.client.List()
	if err != nil {
		return nil, err
	}

	result := make([]*v1alpha1.ResourceDefinition, len(riList))

	for i := range riList {
		result[i] = &v1alpha1.ResourceDefinition{}
		err := result[i].FromInstance(riList[i])
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

// Get -
func (c *ResourceDefinitionClient) Get(name string) (*v1alpha1.ResourceDefinition, error) {
	ri, err := c.client.Get(name)
	if err != nil {
		return nil, err
	}

	service := &v1alpha1.ResourceDefinition{}
	service.FromInstance(ri)

	return service, nil
}

// Delete -
func (c *ResourceDefinitionClient) Delete(res *v1alpha1.ResourceDefinition) error {
	ri, err := res.AsInstance()

	if err != nil {
		return err
	}

	return c.client.Delete(ri)
}

// Create -
func (c *ResourceDefinitionClient) Create(res *v1alpha1.ResourceDefinition) (*v1alpha1.ResourceDefinition, error) {
	ri, err := res.AsInstance()

	if err != nil {
		return nil, err
	}

	cri, err := c.client.Create(ri)
	if err != nil {
		return nil, err
	}

	created := &v1alpha1.ResourceDefinition{}

	err = created.FromInstance(cri)
	if err != nil {
		return nil, err
	}

	return created, err
}

// Update -
func (c *ResourceDefinitionClient) Update(res *v1alpha1.ResourceDefinition) (*v1alpha1.ResourceDefinition, error) {
	ri, err := res.AsInstance()
	if err != nil {
		return nil, err
	}
	resource, err := c.client.Update(ri)
	updated := &v1alpha1.ResourceDefinition{}

	// Updates the resource in place
	err = updated.FromInstance(resource)
	if err != nil {
		return nil, err
	}

	return updated, nil
}
