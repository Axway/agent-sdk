/*
 * This file is automatically generated
 */

package v1alpha1

import (
	"context"

	v1 "git.ecd.axway.int/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/api/v1"
	"git.ecd.axway.int/apigov/apic_agents_sdk/pkg/apic/apiserver/models/management/v1alpha1"
)

// MeshClient -
type MeshClient struct {
	client v1.Scoped
}

// NewMeshClient -

func NewMeshClient(c v1.Base) (*MeshClient, error) {

	client, err := c.ForKind(v1alpha1.MeshGVK())
	if err != nil {
		return nil, err
	}

	return &MeshClient{client}, nil

}

// List -
func (c *MeshClient) List(ctx context.Context, options ...v1.ListOptions) ([]*v1alpha1.Mesh, error) {
	riList, err := c.client.List(ctx, options...)
	if err != nil {
		return nil, err
	}

	result := make([]*v1alpha1.Mesh, len(riList))

	for i := range riList {
		result[i] = &v1alpha1.Mesh{}
		err := result[i].FromInstance(riList[i])
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

// Get -
func (c *MeshClient) Get(ctx context.Context, name string) (*v1alpha1.Mesh, error) {
	ri, err := c.client.Get(ctx, name)
	if err != nil {
		return nil, err
	}

	service := &v1alpha1.Mesh{}
	service.FromInstance(ri)

	return service, nil
}

// Delete -
func (c *MeshClient) Delete(ctx context.Context, res *v1alpha1.Mesh) error {
	ri, err := res.AsInstance()

	if err != nil {
		return err
	}

	return c.client.Delete(ctx, ri)
}

// Create -
func (c *MeshClient) Create(ctx context.Context, res *v1alpha1.Mesh) (*v1alpha1.Mesh, error) {
	ri, err := res.AsInstance()

	if err != nil {
		return nil, err
	}

	cri, err := c.client.Create(ctx, ri)
	if err != nil {
		return nil, err
	}

	created := &v1alpha1.Mesh{}

	err = created.FromInstance(cri)
	if err != nil {
		return nil, err
	}

	return created, err
}

// Update -
func (c *MeshClient) Update(ctx context.Context, res *v1alpha1.Mesh) (*v1alpha1.Mesh, error) {
	ri, err := res.AsInstance()
	if err != nil {
		return nil, err
	}
	resource, err := c.client.Update(ctx, ri)
	if err != nil {
		return nil, err
	}
	updated := &v1alpha1.Mesh{}

	// Updates the resource in place
	err = updated.FromInstance(resource)
	if err != nil {
		return nil, err
	}

	return updated, nil
}
