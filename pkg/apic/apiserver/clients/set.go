/*
 * This file is automatically generated
 */

package clients

import (
	"fmt"
	cAPIV1 "git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/api/v1"
	core_v1alpha1 "git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/core/v1alpha1"
	definitions_v1alpha1 "git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/definitions/v1alpha1"
	management_v1alpha1 "git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1"
)

type Set struct {
	WebhookCoreV1alpha1                              *core_v1alpha1.UnscopedWebhookClient
	SecretCoreV1alpha1                               *core_v1alpha1.UnscopedSecretClient
	ResourceGroupDefinitionsV1alpha1                 *definitions_v1alpha1.ResourceGroupClient
	ResourceDefinitionDefinitionsV1alpha1            *definitions_v1alpha1.UnscopedResourceDefinitionClient
	ResourceDefinitionVersionDefinitionsV1alpha1     *definitions_v1alpha1.UnscopedResourceDefinitionVersionClient
	CommandLineInterfaceDefinitionsV1alpha1          *definitions_v1alpha1.UnscopedCommandLineInterfaceClient
	EnvironmentManagementV1alpha1                    *management_v1alpha1.EnvironmentClient
	APIServiceManagementV1alpha1                     *management_v1alpha1.UnscopedAPIServiceClient
	APIServiceRevisionManagementV1alpha1             *management_v1alpha1.UnscopedAPIServiceRevisionClient
	APIServiceInstanceManagementV1alpha1             *management_v1alpha1.UnscopedAPIServiceInstanceClient
	ConsumerInstanceManagementV1alpha1               *management_v1alpha1.UnscopedConsumerInstanceClient
	ConsumerSubscriptionDefinitionManagementV1alpha1 *management_v1alpha1.UnscopedConsumerSubscriptionDefinitionClient
	IntegrationManagementV1alpha1                    *management_v1alpha1.IntegrationClient
	ResourceHookManagementV1alpha1                   *management_v1alpha1.UnscopedResourceHookClient
	K8SClusterManagementV1alpha1                     *management_v1alpha1.K8SClusterClient
	K8SResourceManagementV1alpha1                    *management_v1alpha1.UnscopedK8SResourceClient
	ResourceDiscoveryManagementV1alpha1              *management_v1alpha1.UnscopedResourceDiscoveryClient
	MeshManagementV1alpha1                           *management_v1alpha1.MeshClient
	MeshServiceManagementV1alpha1                    *management_v1alpha1.UnscopedMeshServiceClient
	MeshWorkloadManagementV1alpha1                   *management_v1alpha1.UnscopedMeshWorkloadClient
	SpecDiscoveryManagementV1alpha1                  *management_v1alpha1.UnscopedSpecDiscoveryClient
	APISpecManagementV1alpha1                        *management_v1alpha1.UnscopedAPISpecClient
	MeshDiscoveryManagementV1alpha1                  *management_v1alpha1.UnscopedMeshDiscoveryClient
}

func New(b cAPIV1.Base) *Set {
	s := &Set{}

	var err error

	s.WebhookCoreV1alpha1, err = core_v1alpha1.NewWebhookClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/core/v1alpha1.Webhook: %s", err))
	}
	s.SecretCoreV1alpha1, err = core_v1alpha1.NewSecretClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/core/v1alpha1.Secret: %s", err))
	}
	s.ResourceGroupDefinitionsV1alpha1, err = definitions_v1alpha1.NewResourceGroupClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/definitions/v1alpha1.ResourceGroup: %s", err))
	}
	s.ResourceDefinitionDefinitionsV1alpha1, err = definitions_v1alpha1.NewResourceDefinitionClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/definitions/v1alpha1.ResourceDefinition: %s", err))
	}
	s.ResourceDefinitionVersionDefinitionsV1alpha1, err = definitions_v1alpha1.NewResourceDefinitionVersionClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/definitions/v1alpha1.ResourceDefinitionVersion: %s", err))
	}
	s.CommandLineInterfaceDefinitionsV1alpha1, err = definitions_v1alpha1.NewCommandLineInterfaceClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/definitions/v1alpha1.CommandLineInterface: %s", err))
	}
	s.EnvironmentManagementV1alpha1, err = management_v1alpha1.NewEnvironmentClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.Environment: %s", err))
	}
	s.APIServiceManagementV1alpha1, err = management_v1alpha1.NewAPIServiceClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.APIService: %s", err))
	}
	s.APIServiceRevisionManagementV1alpha1, err = management_v1alpha1.NewAPIServiceRevisionClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.APIServiceRevision: %s", err))
	}
	s.APIServiceInstanceManagementV1alpha1, err = management_v1alpha1.NewAPIServiceInstanceClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.APIServiceInstance: %s", err))
	}
	s.ConsumerInstanceManagementV1alpha1, err = management_v1alpha1.NewConsumerInstanceClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.ConsumerInstance: %s", err))
	}
	s.ConsumerSubscriptionDefinitionManagementV1alpha1, err = management_v1alpha1.NewConsumerSubscriptionDefinitionClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.ConsumerSubscriptionDefinition: %s", err))
	}
	s.IntegrationManagementV1alpha1, err = management_v1alpha1.NewIntegrationClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.Integration: %s", err))
	}
	s.ResourceHookManagementV1alpha1, err = management_v1alpha1.NewResourceHookClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.ResourceHook: %s", err))
	}
	s.K8SClusterManagementV1alpha1, err = management_v1alpha1.NewK8SClusterClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.K8SCluster: %s", err))
	}
	s.K8SResourceManagementV1alpha1, err = management_v1alpha1.NewK8SResourceClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.K8SResource: %s", err))
	}
	s.ResourceDiscoveryManagementV1alpha1, err = management_v1alpha1.NewResourceDiscoveryClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.ResourceDiscovery: %s", err))
	}
	s.MeshManagementV1alpha1, err = management_v1alpha1.NewMeshClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.Mesh: %s", err))
	}
	s.MeshServiceManagementV1alpha1, err = management_v1alpha1.NewMeshServiceClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.MeshService: %s", err))
	}
	s.MeshWorkloadManagementV1alpha1, err = management_v1alpha1.NewMeshWorkloadClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.MeshWorkload: %s", err))
	}
	s.SpecDiscoveryManagementV1alpha1, err = management_v1alpha1.NewSpecDiscoveryClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.SpecDiscovery: %s", err))
	}
	s.APISpecManagementV1alpha1, err = management_v1alpha1.NewAPISpecClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.APISpec: %s", err))
	}
	s.MeshDiscoveryManagementV1alpha1, err = management_v1alpha1.NewMeshDiscoveryClient(b)
	if err != nil {
		panic(fmt.Sprintf("Failed to create client for git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/management/v1alpha1.MeshDiscovery: %s", err))
	}
	return s
}
