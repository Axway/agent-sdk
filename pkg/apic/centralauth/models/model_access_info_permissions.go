/*
AMPLIFY Central internal Auth API v0.1

APIs to validate platform tokens and retrieve principals permissions.

API version: 1.26.0-SNAPSHOT
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package centralauth

import (
	"encoding/json"
)

// AccessInfoPermissions struct for AccessInfoPermissions
type AccessInfoPermissions struct {
	Global *AccessInfoPermissionsGlobal `json:"global,omitempty"`
	// Permission list scoped to specific entity types.
	Scoped *[]AccessInfoPermissionsScoped `json:"scoped,omitempty"`
}

// NewAccessInfoPermissions instantiates a new AccessInfoPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessInfoPermissions() *AccessInfoPermissions {
	this := AccessInfoPermissions{}
	return &this
}

// NewAccessInfoPermissionsWithDefaults instantiates a new AccessInfoPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessInfoPermissionsWithDefaults() *AccessInfoPermissions {
	this := AccessInfoPermissions{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *AccessInfoPermissions) GetGlobal() AccessInfoPermissionsGlobal {
	if o == nil || o.Global == nil {
		var ret AccessInfoPermissionsGlobal
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessInfoPermissions) GetGlobalOk() (*AccessInfoPermissionsGlobal, bool) {
	if o == nil || o.Global == nil {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *AccessInfoPermissions) HasGlobal() bool {
	if o != nil && o.Global != nil {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given AccessInfoPermissionsGlobal and assigns it to the Global field.
func (o *AccessInfoPermissions) SetGlobal(v AccessInfoPermissionsGlobal) {
	o.Global = &v
}

// GetScoped returns the Scoped field value if set, zero value otherwise.
func (o *AccessInfoPermissions) GetScoped() []AccessInfoPermissionsScoped {
	if o == nil || o.Scoped == nil {
		var ret []AccessInfoPermissionsScoped
		return ret
	}
	return *o.Scoped
}

// GetScopedOk returns a tuple with the Scoped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessInfoPermissions) GetScopedOk() (*[]AccessInfoPermissionsScoped, bool) {
	if o == nil || o.Scoped == nil {
		return nil, false
	}
	return o.Scoped, true
}

// HasScoped returns a boolean if a field has been set.
func (o *AccessInfoPermissions) HasScoped() bool {
	if o != nil && o.Scoped != nil {
		return true
	}

	return false
}

// SetScoped gets a reference to the given []AccessInfoPermissionsScoped and assigns it to the Scoped field.
func (o *AccessInfoPermissions) SetScoped(v []AccessInfoPermissionsScoped) {
	o.Scoped = &v
}

func (o AccessInfoPermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Global != nil {
		toSerialize["global"] = o.Global
	}
	if o.Scoped != nil {
		toSerialize["scoped"] = o.Scoped
	}
	return json.Marshal(toSerialize)
}

type NullableAccessInfoPermissions struct {
	value *AccessInfoPermissions
	isSet bool
}

func (v NullableAccessInfoPermissions) Get() *AccessInfoPermissions {
	return v.value
}

func (v *NullableAccessInfoPermissions) Set(val *AccessInfoPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessInfoPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessInfoPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessInfoPermissions(val *AccessInfoPermissions) *NullableAccessInfoPermissions {
	return &NullableAccessInfoPermissions{value: val, isSet: true}
}

func (v NullableAccessInfoPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessInfoPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


