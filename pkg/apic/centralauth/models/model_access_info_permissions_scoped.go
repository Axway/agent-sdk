/*
AMPLIFY Central internal Auth API v0.1

APIs to validate platform tokens and retrieve principals permissions.

API version: 1.26.0-SNAPSHOT
Contact: support@axway.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package centralauth

import (
	"encoding/json"
)

// AccessInfoPermissionsScoped struct for AccessInfoPermissionsScoped
type AccessInfoPermissionsScoped struct {
	// The entity type that defines the scope of the permissions list.
	Type string `json:"type"`
	// The identifier for the scope entity.
	Id string `json:"id"`
	// The values for the permission strings.
	Values []string `json:"values"`
}

// NewAccessInfoPermissionsScoped instantiates a new AccessInfoPermissionsScoped object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessInfoPermissionsScoped(type_ string, id string, values []string) *AccessInfoPermissionsScoped {
	this := AccessInfoPermissionsScoped{}
	this.Type = type_
	this.Id = id
	this.Values = values
	return &this
}

// NewAccessInfoPermissionsScopedWithDefaults instantiates a new AccessInfoPermissionsScoped object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessInfoPermissionsScopedWithDefaults() *AccessInfoPermissionsScoped {
	this := AccessInfoPermissionsScoped{}
	return &this
}

// GetType returns the Type field value
func (o *AccessInfoPermissionsScoped) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccessInfoPermissionsScoped) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccessInfoPermissionsScoped) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *AccessInfoPermissionsScoped) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccessInfoPermissionsScoped) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccessInfoPermissionsScoped) SetId(v string) {
	o.Id = v
}

// GetValues returns the Values field value
func (o *AccessInfoPermissionsScoped) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *AccessInfoPermissionsScoped) GetValuesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *AccessInfoPermissionsScoped) SetValues(v []string) {
	o.Values = v
}

func (o AccessInfoPermissionsScoped) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableAccessInfoPermissionsScoped struct {
	value *AccessInfoPermissionsScoped
	isSet bool
}

func (v NullableAccessInfoPermissionsScoped) Get() *AccessInfoPermissionsScoped {
	return v.value
}

func (v *NullableAccessInfoPermissionsScoped) Set(val *AccessInfoPermissionsScoped) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessInfoPermissionsScoped) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessInfoPermissionsScoped) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessInfoPermissionsScoped(val *AccessInfoPermissionsScoped) *NullableAccessInfoPermissionsScoped {
	return &NullableAccessInfoPermissionsScoped{value: val, isSet: true}
}

func (v NullableAccessInfoPermissionsScoped) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessInfoPermissionsScoped) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


