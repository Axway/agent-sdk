/*
 * This file is automatically generated
 */

package {{.res.version}}

import (
	"fmt"
	
	v1 "git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/api/v1"
	apiv1 "git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/models/api/v1"
	"git.ecd.axway.org/apigov/apic_agents_sdk/pkg/apic/apiserver/models/{{.res.group}}/{{.res.version}}"
)

type {{.res.kind}}MergeFunc func(*{{.res.version}}.{{.res.kind}}, *{{.res.version}}.{{.res.kind}}) (*{{.res.version}}.{{.res.kind}}, error)

// Merge builds a merge option for an update operation
// TODO revisit nils
func {{.res.kind}}Merge(f {{.res.kind}}MergeFunc) v1.UpdateOption {
	return v1.Merge(func(prev, new apiv1.Interface) (apiv1.Interface, error) {
		p, n := &{{.res.version}}.{{.res.kind}}{}, &{{.res.version}}.{{.res.kind}}{} 

		switch t := prev.(type) {
		case *{{.res.version}}.{{.res.kind}}:
			p = t
		case *apiv1.ResourceInstance:
			err := p.FromInstance(t)
			if err != nil {
				return nil, fmt.Errorf("merge: failed to unserialise prev resource: %w", err)
			}
		default:
			return nil, fmt.Errorf("merge: failed to unserialise prev resource, unxexpected resource type: %T", t)
		}

		switch t := new.(type) {
		case *{{.res.version}}.{{.res.kind}}:
			n = t
		case *apiv1.ResourceInstance:
			err := n.FromInstance(t)
			if err != nil {
				return nil, fmt.Errorf("merge: failed to unserialize new resource: %w", err)
			}
		default:
			return nil, fmt.Errorf("merge: failed to unserialise new resource, unxexpected resource type: %T", t)
		}

		return f(p, n)
	})
}

// {{.res.kind}}Client -
type {{.res.kind}}Client struct {
	client v1.Scoped
}

{{ if .res.scope }}
// Unscoped{{.res.kind}}Client -
type Unscoped{{.res.kind}}Client struct {
	client v1.Unscoped
}
{{ end }}

// New{{.res.kind}}Client -
{{ if .res.scope }}
func New{{.res.kind}}Client(c v1.Base) (*Unscoped{{.res.kind}}Client, error) {
{{ else }}
func New{{.res.kind}}Client(c v1.Base) (*{{.res.kind}}Client, error) {
{{ end }}
	client, err := c.ForKind({{.res.version}}.{{.res.kind}}GVK())
	if err != nil {
		return nil, err
	}

{{ if .res.scope }}
	return &Unscoped{{.res.kind}}Client{client}, nil
{{ else }}
	return &{{.res.kind}}Client{client}, nil
{{ end }}
}

{{ if .res.scope }}
// WithScope -
func (c *Unscoped{{.res.kind}}Client) WithScope(scope string) *{{.res.kind}}Client {
	return &{{.res.kind}}Client{
		c.client.WithScope(scope),
	}
}

// Get - 
func (c *Unscoped{{.res.kind}}Client) Get(name string) (*{{.res.version}}.{{.res.kind}}, error) {
	ri, err := c.client.Get(name)
	if err != nil {
		return nil, err
	}

	service := &{{.res.version}}.{{.res.kind}}{}
	service.FromInstance(ri)

	return service, nil
}

// Update - 
func (c *Unscoped{{.res.kind}}Client) Update(res *{{.res.version}}.{{.res.kind}}, opts ...v1.UpdateOption) (*{{.res.version}}.{{.res.kind}}, error) {
	ri, err := res.AsInstance()
	if err != nil {
		return nil, err
	}
	resource, err := c.client.Update(ri, opts...)
	if err != nil {
		return nil, err
	}

	updated := &{{.res.version}}.{{.res.kind}}{}

	// Updates the resource in place
	err = updated.FromInstance(resource)
	if err != nil {
		return nil, err
	}

	return updated, nil
}
{{ end }}


// List -
func (c *{{.res.kind}}Client) List(options ...v1.ListOptions) ([]*{{.res.version}}.{{.res.kind}}, error) {
	riList, err := c.client.List(options...)
	if err != nil {
		return nil, err
	}

	result := make([]*{{.res.version}}.{{.res.kind}}, len(riList))

	for i := range riList {
		result[i] = &{{.res.version}}.{{.res.kind}}{}
		err := result[i].FromInstance(riList[i])
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

// Get -
func (c *{{.res.kind}}Client) Get(name string) (*{{.res.version}}.{{.res.kind}}, error) {
	ri, err := c.client.Get(name)
	if err != nil {
		return nil, err
	}

	service := &{{.res.version}}.{{.res.kind}}{}
	service.FromInstance(ri)

	return service, nil
}

// Delete -
func (c *{{.res.kind}}Client) Delete(res *{{.res.version}}.{{.res.kind}}) error {
	ri, err := res.AsInstance()

	if err != nil {
		return err
	}

	return c.client.Delete(ri)
}

// Create -
func (c *{{.res.kind}}Client) Create(res *{{.res.version}}.{{.res.kind}}, opts ...v1.CreateOption) (*{{.res.version}}.{{.res.kind}}, error) {
	ri, err := res.AsInstance()

	if err != nil {
		return nil, err
	}

	cri, err := c.client.Create(ri, opts...)
	if err != nil {
		return nil, err
	}

	created := &{{.res.version}}.{{.res.kind}}{}

	err = created.FromInstance(cri)
	if err != nil {
		return nil, err
	}

	return created, err
}

// Update -
func (c *{{.res.kind}}Client) Update(res *{{.res.version}}.{{.res.kind}}, opts ...v1.UpdateOption) (*{{.res.version}}.{{.res.kind}}, error) {
	ri, err := res.AsInstance()
	if err != nil {
		return nil, err
	}
	resource, err := c.client.Update(ri, opts...)
	if err != nil {
		return nil, err
	}

	updated := &{{.res.version}}.{{.res.kind}}{}

	// Updates the resource in place
	err = updated.FromInstance(resource)
	if err != nil {
		return nil, err
	}

	return updated, nil
}
