/*
 * This file is automatically generated
 */

package {{.res.version}}

import (
        "context"

        v1 "git.ecd.axway.int/apigov/apic_agents_sdk/pkg/apic/apiserver/clients/api/v1"
	"git.ecd.axway.int/apigov/apic_agents_sdk/pkg/apic/apiserver/models/{{.res.group}}/{{.res.version}}"
)

// {{.res.kind}}Client -
type {{.res.kind}}Client struct {
	client v1.Scoped
}

{{ if .res.scope }}
// Unscoped{{.res.kind}}Client -
type Unscoped{{.res.kind}}Client struct {
	client v1.Unscoped
}
{{ end }}

// New{{.res.kind}}Client -
{{ if .res.scope }}
func New{{.res.kind}}Client(c v1.Base) (*Unscoped{{.res.kind}}Client, error) {
{{ else }}
func New{{.res.kind}}Client(c v1.Base) (*{{.res.kind}}Client, error) {
{{ end }}
	client, err := c.ForKind(v1alpha1.{{.res.kind}}GVK())
	if err != nil {
		return nil, err
	}

{{ if .res.scope }}
	return &Unscoped{{.res.kind}}Client{client}, nil
{{ else }}
	return &{{.res.kind}}Client{client}, nil
{{ end }}
}

{{ if .res.scope }}
// WithScope -
func (c *Unscoped{{.res.kind}}Client) WithScope(scope string) *{{.res.kind}}Client {
	return &{{.res.kind}}Client{
		c.client.WithScope(scope),
	}
}
{{ end }}

// List -
func (c *{{.res.kind}}Client) List(ctx context.Context, options ...v1.ListOptions) ([]*v1alpha1.{{.res.kind}}, error) {
	riList, err := c.client.List(ctx, options...)
	if err != nil {
		return nil, err
	}

	result := make([]*v1alpha1.{{.res.kind}}, len(riList))

	for i := range riList {
		result[i] = &v1alpha1.{{.res.kind}}{}
		err := result[i].FromInstance(riList[i])
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

// Get -
func (c *{{.res.kind}}Client) Get(ctx context.Context, name string) (*v1alpha1.{{.res.kind}}, error) {
	ri, err := c.client.Get(ctx, name)
	if err != nil {
		return nil, err
	}

	service := &v1alpha1.{{.res.kind}}{}
	service.FromInstance(ri)

	return service, nil
}

// Delete -
func (c *{{.res.kind}}Client) Delete(ctx context.Context, res *v1alpha1.{{.res.kind}}) error {
	ri, err := res.AsInstance()

	if err != nil {
		return err
	}

	return c.client.Delete(ctx, ri)
}

// Create -
func (c *{{.res.kind}}Client) Create(ctx context.Context, res *v1alpha1.{{.res.kind}}) (*v1alpha1.{{.res.kind}}, error) {
	ri, err := res.AsInstance()

	if err != nil {
		return nil, err
	}

	cri, err := c.client.Create(ctx, ri)
	if err != nil {
		return nil, err
	}

	created := &v1alpha1.{{.res.kind}}{}

	err = created.FromInstance(cri)
	if err != nil {
		return nil, err
	}

	return created, err
}

// Update -
func (c *{{.res.kind}}Client) Update(ctx context.Context, res *v1alpha1.{{.res.kind}}) (*v1alpha1.{{.res.kind}}, error) {
	ri, err := res.AsInstance()
	if err != nil {
		return nil, err
	}
	resource, err := c.client.Update(ctx, ri)
	if err != nil {
		return nil, err
	}
	updated := &v1alpha1.{{.res.kind}}{}

	// Updates the resource in place
	err = updated.FromInstance(resource)
	if err != nil {
		return nil, err
	}

	return updated, nil
}
