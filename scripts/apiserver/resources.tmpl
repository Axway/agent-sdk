/*
 * This file is automatically generated
 */

package {{.res.version}}

import (
    "encoding/json"
    apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
)

var (
    _{{.res.kind}}GVK = apiv1.GroupVersionKind{
        GroupKind: apiv1.GroupKind{
            Group: "{{.res.group}}",
            Kind:  "{{.res.kind}}",
        },
        APIVersion: "{{.res.version}}",
    }
{{if .res.scopes }}
  {{.res.kind}}Scopes = []string{"{{ join $.res.scopes "\", \""}}",}
{{else}}
  {{.res.kind}}Scopes = []string{""}
{{end}}
)

const {{.res.kind}}ResourceName = "{{.res.resource}}"

func {{.res.kind}}GVK() apiv1.GroupVersionKind {
	return _{{.res.kind}}GVK
}

func init() {
	apiv1.RegisterGVK(_{{.res.kind}}GVK, {{.res.kind}}Scopes[0], {{.res.kind}}ResourceName)
}

// {{.res.kind}} Resource
type {{.res.kind}} struct {
	apiv1.ResourceMeta
	{{range $field, $isNotEmpty := .res.fields -}}
		{{$type := $field | strings.Title -}}
		{{- $varName := $.res.kind | strings.ReplaceAll "API" "Api" | strings.ReplaceAll "AWS" "Aws" -}}
        {{- $type}} {{if $isNotEmpty}} {{ $varName }}{{ $type }} {{else}} {{if eq $type "Owner"}} *apiv1.Owner {{else}} interface{} {{end}} {{end}} `json:"{{$field | strings.ToLower}}"`
	{{end}}
}

// {{.res.kind}}FromInstanceArray converts a []*ResourceInstance to a []*{{.res.kind}}
func {{.res.kind}}FromInstanceArray(fromArray []*apiv1.ResourceInstance) ([]*{{.res.kind}}, error) {
	newArray := make([]*{{.res.kind}}, 0)
	for _, item := range fromArray {
		res := &{{.res.kind}}{}
		err := res.FromInstance(item)
		if err != nil {
			return make([]*{{.res.kind}}, 0), err
		}
		newArray = append(newArray, res)
	}

	return newArray, nil
}

// AsInstance converts a {{.res.kind}} to a ResourceInstance
func (res *{{.res.kind}}) AsInstance() (*apiv1.ResourceInstance, error) {
	meta := res.ResourceMeta
	meta.GroupVersionKind = {{.res.kind}}GVK()
	res.ResourceMeta = meta

	m, err := json.Marshal(res)
	if err != nil {
		return nil, err
	}

	instance := apiv1.ResourceInstance{}
	err = json.Unmarshal(m, &instance)
	if err != nil {
		return nil, err
	}

	return &instance, nil
}

// FromInstance converts a ResourceInstance to a {{.res.kind}}
func (res *{{.res.kind}}) FromInstance(ri *apiv1.ResourceInstance) (error) {
    if ri == nil {
        res = nil
        return nil
    }
    var err error
    rawResource := ri.GetRawResource()
    if rawResource == nil {
        rawResource, err = json.Marshal(ri)
        if err != nil {
            return err
        }
    }
    err = json.Unmarshal(rawResource, res)
    return err
}

// MarshalJSON custom marshaller to handle sub resources
func (res *{{.res.kind}}) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(&res.ResourceMeta)
	if err != nil {
		return nil, err
	}

	var out map[string]interface{}
	err = json.Unmarshal(m, &out)
	if err != nil {
		return nil, err
	}

	{{range $field, $isNotEmpty := .res.fields -}}
        {{- $fieldName := $field | strings.Title -}}
		{{- $keyName := $field | strings.ToLower -}}
		out["{{$keyName}}"] = res.{{$fieldName}}
	{{end}}

	return json.Marshal(out)
}

// UnmarshalJSON custom unmarshaler to handle sub resources
func (res *{{.res.kind}}) UnmarshalJSON(data []byte) error {
    var err error

    aux := &apiv1.ResourceInstance{}
    err = json.Unmarshal(data, aux)
    if err != nil {
        return err
    }

    res.ResourceMeta = aux.ResourceMeta
    res.Owner = aux.Owner

    sr, err := json.Marshal(aux.Spec)
    if err != nil {
        return err
    }

    err = json.Unmarshal(sr, &res.Spec)
    if err != nil {
        return err
    }

    {{range $field, $isNotEmpty := .res.fields -}}
        {{- $fieldName := $field | strings.Title -}}
        {{- $keyName := $field | strings.ToLower -}}
        {{if eq $keyName "owner"}}
        {{else if eq $keyName "spec"}}
        {{else}}
        sr, err = json.Marshal(aux.SubResources["{{$keyName}}"])
        if err != nil {
            return err
        }

        err = json.Unmarshal(sr, &res.{{$fieldName}})
        if err != nil {
            return err
        }
        {{end}}
    {{end}}
    return nil
}
