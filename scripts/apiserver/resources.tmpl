/*
 * This file is automatically generated
 */

package {{.res.version}}

import (
	"encoding/json"
	apiv1 "github.com/Axway/agent-sdk/pkg/apic/apiserver/models/api/v1"
)

var (
	_{{.res.kind}}GVK = apiv1.GroupVersionKind{
		GroupKind: apiv1.GroupKind{
			Group: "{{.res.group}}",
			Kind:  "{{.res.kind}}",
		},
		APIVersion: "{{.res.version}}",
	}
{{if .res.scopes }}
  {{.res.kind}}Scopes = []string{"{{ join $.res.scopes "\", \""}}",}
{{else}}
  {{.res.kind}}Scopes = []string{""}
{{end}}
)

const {{.res.kind}}ResourceName = "{{.res.resource}}"



func {{.res.kind}}GVK() apiv1.GroupVersionKind {
	return _{{.res.kind}}GVK
}

func init() {
	apiv1.RegisterGVK(_{{.res.kind}}GVK, {{.res.kind}}Scopes[0], {{.res.kind}}ResourceName)
}

// {{.res.kind}} Resource
type {{.res.kind}} struct {
	apiv1.ResourceMeta
	{{range $field, $isNotEmpty := .res.fields}}
		{{ $type := $field | strings.Title }}
		{{ $varName := $.res.kind | strings.ReplaceAll "API" "Api" | strings.ReplaceAll "AWS" "Aws" }}
        {{ $type}} {{if $isNotEmpty}} {{ $varName }}{{ $type }} {{else}} {{if eq $type "Owner"}} *apiv1.Owner {{else}} interface{} {{end}} {{end}} `json:"{{$field | strings.ToLower}}"`
	{{end}}
}

// FromInstance converts a ResourceInstance to a {{.res.kind}}
func (res *{{.res.kind}}) FromInstance(ri *apiv1.ResourceInstance) (error) {
	if ri == nil {
		res = nil
		return nil
	}

	var err error
	rawResource := ri.GetRawResource()
	if rawResource == nil {
		rawResource, err = json.Marshal(ri)
		if err != nil {
			return err
		}
	}

	err = json.Unmarshal(rawResource, res)
	return err
}

// {{.res.kind}}FromInstanceArray converts a []*ResourceInstance to a []*{{.res.kind}}
func {{.res.kind}}FromInstanceArray(fromArray []*apiv1.ResourceInstance) ([]*{{.res.kind}}, error) {
	newArray := make([]*{{.res.kind}}, 0)
	for _, item := range fromArray {
		res := &{{.res.kind}}{}
		err := res.FromInstance(item)
		if err != nil {
			return make([]*{{.res.kind}}, 0), err
		}
		newArray = append(newArray, res)
	}

	return newArray, nil
}

// AsInstance converts a {{.res.kind}} to a ResourceInstance
func (res *{{.res.kind}}) AsInstance() (*apiv1.ResourceInstance, error) {
	meta := res.ResourceMeta
	meta.GroupVersionKind = {{.res.kind}}GVK()
	res.ResourceMeta = meta

	m, err := json.Marshal(res)
	if err != nil {
		return nil, err
	}

	instance := apiv1.ResourceInstance{}
	err = json.Unmarshal(m, &instance)
	if err != nil {
		return nil, err
	}

	return &instance, nil
}

// MarshalJSON custom marshaller to handle sub resources
func (res *{{.res.kind}}) MarshalJSON() ([]byte, error) {
	m, err := json.Marshal(&res.ResourceMeta)
	if err != nil {
		return nil, err
	}

	var out map[string]interface{}
	err = json.Unmarshal(m, &out)
	if err != nil {
		return nil, err
	}

	out["spec"] = res.Spec
	out["owner"] = res.Owner

	return json.Marshal(out)
}

// UnmarshalJSON custom unmarshaler to handle sub resources
func (res *{{.res.kind}}) UnmarshalJSON(data []byte) error {
	var err error

	// Create an alias to unmarshal the data into to avoid a circular UnmarshalJSON call
	type Alias {{.res.kind}}
	aux := &struct{ *Alias }{
		Alias: (*Alias)(res),
	}

	err = json.Unmarshal(data, &aux)
	if err != nil {
		return err
	}

	// The only field that will properly unmarshal will be the ResourceMeta field.
	// This is because ResourceMeta is embedded on all resources, and when UnmarshalJSON is called on the Alias,
	// the ResourceMeta UnmarshalJSON will be called instead of the default UnmarshalJSON, which would handle all fields.
	// The rest of the fields need to be unmarshalled manually.
	res.ResourceMeta = aux.ResourceMeta

	// unmarshall all fields into a map
	raw := map[string]interface{}{}

	err = json.Unmarshal(data, &raw)
	if err != nil {
		return err
	}

	// unmarshall the owner field
	if raw["owner"] != nil {
		res.Owner = &apiv1.Owner{}
		bts, err := json.Marshal(raw["owner"])
		if err != nil {
			return err
		}
		err = json.Unmarshal(bts, res.Owner)
		if err != nil {
			return err
		}
	}

	// unmarshall the spec field
	if raw["spec"] != nil {
		bts, err := json.Marshal(raw["spec"])
		if err != nil {
			return err
		}
		err = json.Unmarshal(bts, &res.Spec)
		if err != nil {
			return err
		}
	}

	return nil
}
