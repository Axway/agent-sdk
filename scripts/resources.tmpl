/*
   * This file is automatically generated
   */

  package {{.res.version}}

  import (
    "encoding/json"
    v1 "{{.Env.PROJ}}/pkg/apic/apiserver/models/api/v1"
  )
  var (
  _{{.res.kind}}GVK = v1.GroupVersionKind{
		GroupKind: v1.GroupKind{
			Group: "{{.res.group}}",
			Kind:  "{{.res.kind}}",
		},
		ApiVersion: "{{.res.version}}",
	}
  )

  const (

  {{if .res.scope }}
  {{.res.kind}}Scope    = "{{.res.scope}}"
  {{else}}
  {{.res.kind}}Scope    = ""
  {{end}}
  {{.res.kind}}Resource = "{{.res.resource}}"
  )
  func {{.res.kind}}GVK() v1.GroupVersionKind {
  return _{{.res.kind}}GVK
  }

  func init() {
	v1.RegisterGVK(_{{.res.kind}}GVK, {{.res.kind}}Scope, {{.res.kind}}Resource)
  }


  type {{.res.kind}} struct {
  v1.ResourceMeta
  {{range $field, $isNotEmpty := .res.fields}}
     {{$field | strings.Title}} {{if $isNotEmpty}} {{$.res.kind | strings.ReplaceAll "API" "Api"}}{{$field | strings.Title}} {{else}} struct{} {{end}} `json:"{{. | strings.ToLower}}"`
  {{end}}
  }

func (res *{{.res.kind}}) FromInstance(ri *v1.ResourceInstance) (error) {
	// TODO this needs to be better
	m, err := json.Marshal(ri.Spec)
	if err != nil {
		return err
	}

	spec := &{{if .res.fields.spec }}{{$.res.kind | strings.ReplaceAll "API" "Api"}}Spec{{else}}struct{}{{end}}{}
	err = json.Unmarshal(m, spec)
	if err != nil {
		return err
	}

        *res = {{.res.kind}}{ResourceMeta: ri.ResourceMeta, Spec: *spec}

        return err
}

func (res *{{.res.kind}}) AsInstance() (*v1.ResourceInstance, error) {
	m, err := json.Marshal(res.Spec)
	if err != nil {
		return nil, err
	}

	spec := map[string]interface{}{}
	err = json.Unmarshal(m, &spec)
	if err != nil {
		return nil, err
	}

	return &v1.ResourceInstance{ResourceMeta: res.ResourceMeta, Spec: spec}, nil
}
