@startuml
participant Environment as env
participant SDK as sdk 
participant IDP as idp 
participant Agent as agent
participant Dataplane as dataplane

group IdP Registration
'Register IdP provider
activate sdk
sdk -> sdk: Read IdP config

activate idp
sdk -> idp: Fetch metadata for the provider
deactivate idp
sdk -> sdk: Add provider to registry

end

group API Discovery + associating CRD based on registered provider
' Associating Credential Request Definitions with API service instance
agent -> dataplane: Discover API
deactivate sdk

activate agent
activate dataplane


agent -> sdk: Register CRD for external providers based on the discovered API metadata and registered provider
activate sdk
sdk -> sdk: Setup OAuth provider specific request schema in CRD
note right sdk: Include property to identify external provider in CRD e.g. token endpoint
note right sdk: Include OAuth specific properties grant_types, token_auth_method etc in CRD.
sdk -> env: Register CRD
activate env


agent -> agent: Associate the CRD with service definition to be published based on the API metadata
agent -> sdk: Publish the service
sdk -> env: Publish the service, revision and instance with associated CRD 

deactivate sdk
deactivate env
deactivate agent
deactivate dataplane
end

group Provisioning Credential 
'Provision Credential
env -> sdk: Credential Create Event
activate env
activate sdk
sdk -> sdk: Identify based on the property if the CRD associated to credential request is for IDP
sdk -> sdk: Lookup provider using the property from CRD
sdk -> sdk: Prepare OAuth client metadata based on the CRD data in request
sdk -> sdk: Use the provider and client metadata to register client in IdP
sdk -> idp: Create the client using dynamic client registration specification
activate idp
idp --> sdk: Return new client 
deactivate idp
sdk -> sdk: Prepare credential data using CRD data and provisioned OAuth client
sdk -> agent: CredentialProvision
activate agent

agent -> agent: Identify if the credential was provisioned using IDP using credential data
note right agent: credential data passed to handler holds OAuth client metadata like client_id, client_secret etc.
agent -> dataplane: Associate the OAuth client with the dataplane app using the details in credential
activate dataplane
agent -> sdk: success
sdk -> env: Update Credential Success
note left sdk: Add credential data, with encrypted fields

deactivate agent
deactivate sdk
deactivate env
deactivate dataplane
end 

group Deprovisioning Credential 
'Deprovision Credential
env -> sdk: Credential Update Event
activate env
activate sdk
sdk -> sdk: Identify based on the property if the CRD associated to credential request is for IDP
sdk -> sdk: Lookup provider using the property from CRD
sdk -> sdk: Prepare OAuth client metadata based on the CRD data in request
sdk -> sdk: Use the provider and client metadata to register client in IdP


sdk -> agent: CredentialDeprovision
activate agent
agent -> agent: Identify if the credential was provisioned using IDP using credential data
agent -> dataplane: Remove the associate of the external client in the dataplane app
activate dataplane
agent -> sdk: success
sdk -> sdk: Read the client_id from the provisioned data in the credential request
sdk -> sdk: Call interface to deregister client using client id
sdk -> idp: Remove the client using dynamic client registration specification
activate idp
idp --> sdk: Delete client response
deactivate idp
sdk -> env: Update Credential, allowing resource removal

deactivate agent
deactivate sdk
deactivate env
deactivate dataplane
end

@enduml
