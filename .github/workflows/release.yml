
name: Release SDK

# run this action if there is a push of a new tag of the form v.n.n.n on main branch
# on:
#   release:
#     types: [published]
# need to figure this out. The above should have worked but caused ONLY the release action to run
# adding the below only to keep the action but to make it not ever run
on:
  push:
    branches:
      - APIGOV-DALE
      - APIGOV-dale
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  release:
    runs-on: ubuntu-latest
    name: Release SDK
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Set version variables
        id: vars
        run: |
          echo "github_ref ${GITHUB_REF}"
          echo "github_ref_name ${GITHUB_REF_NAME}"
          echo "github.refname ${{  github.ref_name }}"
          echo "INT - update to new release ${GITHUB_REF_NAME}"

          echo "tag ${GITHUB_REF#refs/*/}"
          echo "tag ${GITHUB_REF#refs/*/}"
          export FOO="/refs/tags/v1.2.3"
          echo "foo ${FOO#refs/*/}"
          echo "foo1 ${FOO#*v}"
          tag=$(echo ${FOO#*v} | cut -d. -f1)
          echo "tag $tag"
          tag=$(echo ${FOO#*v} | cut -d. -f2)
          echo "tag1 $tag"
          tag=$(echo ${FOO#*v} | cut -d. -f3)
          echo "tag2 $tag"
          # next_patch=echo $((${tag}+"1"))
          echo "here"
          echo "next_patch ${next_patch}"
          next_patch1=echo $((${tag}+1))
          echo "there"
          echo "next_patch ${next_patch}"
          echo "next_patch1 ${next_patch1}"
          echo ::set-output name=major_ver::$(echo ${FOO#refs/*/} | cut -d. -f1)
          echo ::set-output name=minor_ver::$(echo ${FOO#refs/*/} | cut -d. -f2)
          echo ::set-output name=patch_ver::$(echo ${FOO#refs/*/} | cut -d. -f3)
          # let x=echo $({FOO#refs/*/} | cut -d. -f3)
          # echo "$x"
          # echo ::set-output name=major2_ver::${x}
          # echo ::set-output name=major_ver::${GITHUB_REF#refs/*/} | cut -d. -f1
          # echo ::set-output name=minor_ver::${GITHUB_REF#refs/*/} | cut -d. -f2
          # echo ::set-output name=patch_ver::${GITHUB_REF#refs/*/} | cut -d. -f3
          echo ::set-output name=next_ver::$$( ${{ steps.vars.outputs.patch_ver }} + 1)
          echo "here1"
          echo "here2"
          echo ::set-output name=new_ver::v${{ steps.vars.outputs.major_ver }}.${{ steps.vars.outputs.minor_ver }}.${{ steps.vars.outputs.next_ver }}
      - name: Update version file
        working-directory: ./build/scripts
        # This passes vn.n.n to the shellscript. The full GITHUB_REF is refs/tags/vn.n.n
        run: |
          echo "major ${{ steps.vars.outputs.major_ver }}"
          echo "major2 ${{ steps.vars.outputs.major2_ver }}"
          echo "minor ${{ steps.vars.outputs.minor_ver }}"
          echo "patch ${{ steps.vars.outputs.patch_ver }}"
          echo "next ${{ steps.vars.outputs.patch_ver }}"
          echo "next ${{ steps.vars.outputs.new_ver }}"

      #     ./promote.sh ${GITHUB_REF}
      # - name: Create pull request
      #   uses: peter-evans/create-pull-request@v4
      #   with:
      #     branch: APIGOV-updateversion
      #     commit-message: INT - update to new release ${GITHUB_REF_NAME}
      #     title: INT - update to new release ${GITHUB_REF_NAME}
      #     base: main
      #     delete-branch: true

     