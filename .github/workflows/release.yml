
name: Release SDK

# run this action if there is a push of a new tag of the form v.n.n.n on main branch
# on:
#   release:
#     types: [published]
# need to figure this out. The above should have worked but caused ONLY the release action to run
# adding the below only to keep the action but to make it not ever run
on:
  push:
    branches:
      - APIGOV-DALE
      - APIGOV-dale
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  release:
    runs-on: ubuntu-latest
    name: Release SDK
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Set version variables
        id: vars
        run: |
          # The full GITHUB_REF should look like: refs/tags/vn.n.n
          echo "github_ref ${GITHUB_REF}"

          # temp
          GITHUB_REF="/refs/tags/v1.2.3"

          # this mess parses GITHUB_REF into its major/minor/patch parts
          MAJOR_VER=$(echo ${GITHUB_REF#*v} | cut -d. -f1)
          echo "MAJOR_VER $MAJOR_VER"
          MINOR_VER=$(echo ${GITHUB_REF#*v} | cut -d. -f2)
          echo "MINOR_VER $MINOR_VER"
          PATCH_VER=$(echo ${GITHUB_REF#*v} | cut -d. -f3)
          echo "PATCH_VER $PATCH_VER"
          declare -i PATCH_VER
          PATCH_VER+=1
          echo "PATCH_VER now $PATCH_VER"
          echo ::set-output name=next_ver::${MAJOR_VER}.${MINOR_VER}.${PATCH_VER}
      - name: Update version file
        working-directory: ./build/scripts
        # This passes vn.n.n to the shellscript.
        run: |
          ./promote.sh ${{ steps.vars.outputs.next_ver }}
      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: APIGOV-updateversion
          commit-message: INT - update to new release ${{ steps.vars.outputs.next_ver }}
          title: INT - update to new release ${{ steps.vars.outputs.next_ver }}
          base: main
          delete-branch: true

     