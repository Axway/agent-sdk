syntax = "proto3";

package central.events.v1.datamodel;

option go_package = "github.com/Axway/agent-sdk/pkg/watchmanager/proto";

// API Server generic resource structure.
message ResourceInstance {
    // Defines the group from which the resource belongs to. The server infers this from the endpoint the client submits the request to.
    string group = 1;

    // Resource kind
    string kind = 2;

    // Name of the resource
    string name = 4;

    // Metadata.
    Metadata metadata = 5;

    map<string, string> attributes = 6;
}

// Metadata that all server resources have. Data is generated by the server.
message Metadata {
    message ScopeKind {
        // Internal id of the scope resource where the resource is defined.
        string id = 1;

        // The kind of the scope resource where the resource is defined.
        string kind = 2;

        // The name of the scope where the resource is defined.
        string name = 3;

        // The URL to access the scope resource.
        string selfLink = 4;
    }

    // Internal id of the resource.
    string id = 1;

    // The scope where this resource was defined.
    ScopeKind scope = 2;

    // The URL representing this resource object.
    string selfLink = 6;

    // resource references
    repeated Reference references = 7;
}

// Owner of the resource.
message Owner {
    enum Type {
        TEAM = 0;
    }

    // Id of the owner of the resource.
    string id = 1;

    // The type of the owner. Defaults to team if not present.
    Type type = 2;
}

// Reference resource
message Reference {
    enum Type {
        SOFT = 0;
        HARD = 1;
    }

    // Unique id generated by the server.
    string id = 1;

    // The kind of the referenced resource.
    string kind = 2;

    // The name of the referenced resource.
    string name = 3;

    // The kind of the referenced resource scope.
    string scopeKind = 4;

    // The name of the referenced resource scope.
    string scopeName = 5;

    // The URL representing the referenced resource.
    string selfLink = 6;

    // Defines the type of the reference: * soft - spec property that has this reference will get nulled out if the referenced resource gets removed. * hard - dictates that the current resource will get removed when the referenced resource gets removed.
    Type type = 7;
}
